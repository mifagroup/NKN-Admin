/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get addresss list
         * @description Returns list of addresss
         */
        get: operations["getAddresss"];
        put?: never;
        /**
         * Store new address
         * @description Returns new address data
         */
        post: operations["storeAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get address information
         * @description Returns address data
         */
        get: operations["getAddressByUUID"];
        /**
         * Update existing address
         * @description Returns updated address data
         */
        put: operations["updateAddress"];
        post?: never;
        /**
         * Delete existing address
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteAddress"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address/make-default/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Make address as default */
        post: operations["DefaultAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get attributes list
         * @description Returns list of attributes
         */
        get: operations["getAttributes"];
        put?: never;
        /**
         * Store new attribute
         * @description Returns new attribute data
         */
        post: operations["storeAttribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attribute/{attribute}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attribute information
         * @description Returns attribute data
         */
        get: operations["getAttributeByID"];
        /**
         * Update existing attribute
         * @description Returns updated attribute data
         */
        put: operations["updateAttribute"];
        post?: never;
        /**
         * Delete existing attribute
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteAttribute"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attribute/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get attribute extra data
         * @description Returns attribute extra data
         */
        get: operations["49a87d00f63b2ebbbaf608043e81c345"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attribute-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get attributeGroups list
         * @description Returns list of attributeGroups
         */
        get: operations["getAttributeGroups"];
        put?: never;
        /**
         * Store new attributeGroup
         * @description Returns new attributeGroup data
         */
        post: operations["storeAttributeGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attribute-group/{attributeGroup}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attributeGroup information
         * @description Returns attributeGroup data
         */
        get: operations["getAttributeGroupByID"];
        /**
         * Update existing attributeGroup
         * @description Returns updated attributeGroup data
         */
        put: operations["updateAttributeGroup"];
        post?: never;
        /**
         * Delete existing attributeGroup
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteAttributeGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{attribute}/attribute-value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get attributeValues list
         * @description Returns list of attributeValues
         */
        get: operations["getAttributeValues"];
        put?: never;
        /**
         * Store new attributeValue
         * @description Returns new attributeValue data
         */
        post: operations["storeAttributeValue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{attribute}/attribute-value/{attributeValue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attributeValue information
         * @description Returns attributeValue data
         */
        get: operations["getAttributeValueByID"];
        /**
         * Update existing attributeValue
         * @description Returns updated attributeValue data
         */
        put: operations["updateAttributeValue"];
        post?: never;
        /**
         * Delete existing attributeValue
         * @description Deletes a record and returns true
         */
        delete: operations["deleteAttributeValue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check user exist or not */
        post: operations["check"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register new user
         * @description Register new user
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm user
         * @description Confirm user
         */
        post: operations["confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/resend-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * resend code
         * @description resend code
         */
        post: operations["resendCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/set-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set password
         * @description Set password
         */
        post: operations["setPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login user
         * @description Login user
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login admin
         * @description Login admin
         */
        post: operations["loginForAdmin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forget-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Forget password
         * @description Forget password
         */
        post: operations["forgetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Logout user
         * @description Logout user
         */
        get: operations["logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * handle google callback data
         * @description handle google callback data
         */
        post: operations["88c1f759dcb17c1ebc6505483b6ddee9"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get banks list
         * @description Returns list of banks
         */
        get: operations["getBanks"];
        put?: never;
        /**
         * Store new bank
         * @description Returns new bank data
         */
        post: operations["storeBank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank/{bank}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bank information
         * @description Returns bank data
         */
        get: operations["getBankByID"];
        /**
         * Update existing bank
         * @description Returns updated bank data
         */
        put: operations["updateBank"];
        post?: never;
        /**
         * Delete existing bank
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteBank"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/banner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get banners list
         * @description Returns list of banners
         */
        get: operations["getBanners"];
        put?: never;
        /**
         * Store new banner
         * @description Returns new banner data
         */
        post: operations["storeBanner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/banner/{banner}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get banner information
         * @description Returns banner data
         */
        get: operations["getBannerByID"];
        /**
         * Update existing banner
         * @description Returns updated banner data
         */
        put: operations["updateBanner"];
        post?: never;
        /**
         * Delete existing banner
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteBanner"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/banner/toggle/{banner}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle Banner */
        post: operations["toggleBanner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/banner/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Banner data
         * @description Returns Banner data
         */
        get: operations["getBannerData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get brands list
         * @description Returns list of brands
         */
        get: operations["getBrands"];
        put?: never;
        /**
         * Store new brand
         * @description Returns new brand data
         */
        post: operations["storeBrand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brand/{brand}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get brand information
         * @description Returns brand data
         */
        get: operations["getBrandByID"];
        /**
         * Update existing brand
         * @description Returns updated brand data
         */
        put: operations["updateBrand"];
        post?: never;
        /**
         * Delete existing brand
         * @description Deletes a record and returns true
         */
        delete: operations["deleteBrand"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brand/toggle/{brand}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle existing brand
         * @description Toggle a record and returns updated brand data
         */
        post: operations["toggleBrand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get carts list
         * @description Returns list of carts
         */
        get: operations["getCarts"];
        put?: never;
        /**
         * Store new cart
         * @description Returns new cart data
         */
        post: operations["storeCart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/{cart}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete existing cart
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteCart"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get categories list
         * @description Returns list of categories
         */
        get: operations["getCategories"];
        put?: never;
        /**
         * Store new category
         * @description Returns new category data
         */
        post: operations["storeCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/highlights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get highlights list for home page
         * @description Returns list of highlights for home page
         */
        get: operations["getHighlights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category information
         * @description Returns category data
         */
        get: operations["getCategoryByID"];
        /**
         * Update existing category
         * @description Returns updated category data
         */
        put: operations["updateCategory"];
        post?: never;
        /**
         * Delete existing category
         * @description Deletes a record and returns true
         */
        delete: operations["deleteCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/toggle/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle Category
         * @description Returns Category data
         */
        post: operations["toggleCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/category/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Category extra data
         * @description Returns Category extra data
         */
        get: operations["getCategoryData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/city": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get citys list
         * @description Returns list of citys
         */
        get: operations["getCitys"];
        put?: never;
        /**
         * Store new city
         * @description Returns new city data
         */
        post: operations["storeCity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/city/{city}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get city information
         * @description Returns city data
         */
        get: operations["getCityByID"];
        /**
         * Update existing city
         * @description Returns updated city data
         */
        put: operations["updateCity"];
        post?: never;
        /**
         * Delete existing city
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteCity"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get comments list
         * @description Returns list of comments
         */
        get: operations["getComments"];
        put?: never;
        /**
         * Store new comment
         * @description Returns new comment data
         */
        post: operations["storeComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/list/{model}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get comments list by model */
        get: operations["getCommentsByModel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/list-by-user/{user}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get comments list by user */
        get: operations["getCommentsByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{comment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get comment information
         * @description Returns comment data
         */
        get: operations["getCommentByID"];
        /**
         * Update existing comment
         * @description Returns updated comment data
         */
        put: operations["updateComment"];
        post?: never;
        /**
         * Delete existing comment
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/{comment}/reply-by-admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reply to comment by admin
         * @description Reply to comment by admin
         */
        post: operations["replyByAdmin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comment/toggle/{comment}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["toggleComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/country": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get countrys list
         * @description Returns list of countrys
         */
        get: operations["getCountrys"];
        put?: never;
        /**
         * Store new country
         * @description Returns new country data
         */
        post: operations["storeCountry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/country/{country}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get country information
         * @description Returns country data
         */
        get: operations["getCountryByUUID"];
        /**
         * Update existing country
         * @description Returns updated country data
         */
        put: operations["updateCountry"];
        post?: never;
        /**
         * Delete existing country
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteCountry"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get currencys list
         * @description Returns list of currencys
         */
        get: operations["getCurrencys"];
        put?: never;
        /**
         * Store new currency
         * @description Returns new currency data
         */
        post: operations["storeCurrency"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currency/{currency}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get currency information
         * @description Returns currency data
         */
        get: operations["getCurrencyByID"];
        /**
         * Update existing currency
         * @description Returns updated currency data
         */
        put: operations["updateCurrency"];
        post?: never;
        /**
         * Delete existing currency
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteCurrency"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get discounts list
         * @description Returns list of discounts
         */
        get: operations["getDiscounts"];
        put?: never;
        /**
         * Store new discount
         * @description Returns new discount data
         */
        post: operations["storeDiscount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discount/{discount}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get discount information
         * @description Returns discount data
         */
        get: operations["getDiscountByID"];
        /**
         * Update existing discount
         * @description Returns updated discount data
         */
        put: operations["updateDiscount"];
        post?: never;
        /**
         * Delete existing discount
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/{history}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get history information
         * @description Returns history data
         */
        get: operations["getHistoryByID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/export/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * export
         * @description export
         */
        post: operations["9608ca180efeead34cf67e0ed42352f3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/home/web": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** return home page for web */
        get: operations["getHomeWeb"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/home/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** return home page for app */
        get: operations["getHomeApp"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/layout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get layouts list
         * @description Returns list of layouts
         */
        get: operations["getLayouts"];
        put?: never;
        /**
         * Store new layout
         * @description Not work, dont use
         */
        post: operations["storeLayout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/layout/{layout}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get layout information
         * @description Returns layout data
         */
        get: operations["getLayoutByID"];
        /**
         * Update existing layout
         * @description Not work, dont use
         */
        put: operations["updateLayout"];
        post?: never;
        /**
         * Delete existing layout
         * @description Not work, dont use
         */
        delete: operations["deleteLayout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{layout}/layout-section": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get layoutSections list
         * @description Returns list of layoutSections
         */
        get: operations["getLayoutSections"];
        put?: never;
        /**
         * Store new layoutSection
         * @description use most send some property when select type: PRODUCT=>product_id, CATEGORY=>category_id, BRAND=>brand_id, TAG=>tag_id, SLIDER=>slider_id
         */
        post: operations["storeLayoutSection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{layout}/layout-section/{section}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get layoutSection information
         * @description Returns layoutSection data
         */
        get: operations["getLayoutSectionByID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{layout}/layout-section/{layoutSection}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing layoutSection
         * @description use most send some property when select type: PRODUCT=>product_id, CATEGORY=>category_id, BRAND=>brand_id, TAG=>tag_id, SLIDER=>slider_id
         */
        put: operations["updateLayoutSection"];
        post?: never;
        /**
         * Delete existing layoutSection
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteLayoutSection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{layout}/layout-section/toggle/{layoutSection}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle LayoutSection */
        post: operations["toggleLayoutSection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{layout}/layout-section/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get LayoutSection data
         * @description Returns LayoutSection data
         */
        get: operations["getLayoutSectionData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get orders list
         * @description Returns list of orders
         */
        get: operations["getOrders"];
        put?: never;
        /**
         * Store new order
         * @description Returns new order data
         */
        post: operations["storeOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{order}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order information
         * @description Returns order data
         */
        get: operations["getOrderByID"];
        /**
         * Update existing order
         * @description Returns updated order data
         */
        put: operations["updateOrder"];
        post?: never;
        /**
         * Delete existing order
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteOrder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get orderStatuss list
         * @description Returns list of orderStatuss
         */
        get: operations["getOrderStatuss"];
        put?: never;
        /**
         * Store new orderStatus
         * @description Returns new orderStatus data
         */
        post: operations["storeOrderStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-status/{orderStatus}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get orderStatus information
         * @description Returns orderStatus data
         */
        get: operations["getOrderStatusByID"];
        /**
         * Update existing orderStatus
         * @description Returns updated orderStatus data
         */
        put: operations["updateOrderStatus"];
        post?: never;
        /**
         * Delete existing orderStatus
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteOrderStatus"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get paymentMethods list
         * @description Returns list of paymentMethods
         */
        get: operations["getPaymentMethods"];
        put?: never;
        /**
         * Store new paymentMethod
         * @description Returns new paymentMethod data
         */
        post: operations["storePaymentMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-method/{paymentMethod}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paymentMethod information
         * @description Returns paymentMethod data
         */
        get: operations["getPaymentMethodByID"];
        /**
         * Update existing paymentMethod
         * @description Returns updated paymentMethod data
         */
        put: operations["updatePaymentMethod"];
        post?: never;
        /**
         * Delete existing paymentMethod
         * @description Deletes a record and returns no content
         */
        delete: operations["deletePaymentMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get pricingPlans list
         * @description Returns list of pricingPlans
         */
        get: operations["getPricingPlans"];
        put?: never;
        /**
         * Store new pricingPlan
         * @description Returns new pricingPlan data
         */
        post: operations["storePricingPlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-plan/{pricingPlan}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pricingPlan information
         * @description Returns pricingPlan data
         */
        get: operations["getPricingPlanByUUID"];
        /**
         * Update existing pricingPlan
         * @description Returns updated pricingPlan data
         */
        put: operations["updatePricingPlan"];
        post?: never;
        /**
         * Delete existing pricingPlan
         * @description Deletes a record and returns no content
         */
        delete: operations["deletePricingPlan"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get products list
         * @description Returns list of products
         */
        get: operations["getProducts"];
        put?: never;
        /**
         * Store new product
         * @description Returns new product data
         */
        post: operations["storeProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/related/{product}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** related products */
        get: operations["relatedProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{product}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product information
         * @description Returns product data
         */
        get: operations["getProductByID"];
        /**
         * Update existing product
         * @description Returns updated product data
         */
        put: operations["updateProduct"];
        post?: never;
        /**
         * Delete existing product
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/client/{product}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product information with more details in client side */
        get: operations["getProductByIDForClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/toggle/{product}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Product data */
        get: operations["toggleProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Product data
         * @description Returns Product data
         */
        get: operations["getProductData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get productInterfaces list
         * @description Returns list of productInterfaces
         */
        get: operations["getProductInterfaces"];
        put?: never;
        /**
         * Store new productInterface
         * @description Returns new productInterface data
         */
        post: operations["storeProductInterface"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface/{productInterface}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get productInterface information
         * @description Returns productInterface data
         */
        get: operations["getProductInterfaceByUUID"];
        /**
         * Update existing productInterface
         * @description get needed data from [Get ProductInterface Data](#/ProductInterface/getProductInterfaceData) <br/> add new image to gallery with [Add a new image to gallery](#/Utility/uploadPrivate)
         */
        put: operations["updateProductInterface"];
        post?: never;
        /**
         * Delete existing productInterface
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteProductInterface"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface/{productInterface}/update-attributes-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** update-attributes-products */
        post: operations["updateProductInterfaceAttributesProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface/toggle/{productInterface}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle ProductInterface
         * @description Toggle ProductInterface
         */
        post: operations["toggleProductInterface"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ProductInterface data
         * @description Returns ProductInterface data
         */
        get: operations["getProductInterfaceData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface/set-primary-image/{productInterface}/{media}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set Primary Image
         * @description Set Primary Image
         */
        patch: operations["setPrimaryImage"];
        trace?: never;
    };
    "/product-interface/set-image-relations/{productInterface}/{media}/{variants}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set Image Relations
         * @description with this endpoint you can set image relations with productInterface varients
         */
        patch: operations["setImageRelations"];
        trace?: never;
    };
    "/product-interface/compare/{ids}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Compare productInterfaces */
        get: operations["productInterfacesCompare"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-interface/{productInterface}/add-star": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * add star
         * @description add star
         */
        post: operations["b5d2a5156430088750e3ca23d5c9c419"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing profile
         * @description Returns updated profile data
         */
        put: operations["updateProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get profits list
         * @description Returns list of profits
         */
        get: operations["getProfits"];
        put?: never;
        /**
         * Store new profit
         * @description Returns new profit data
         */
        post: operations["storeProfit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profit/{profit}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get profit information
         * @description Returns profit data
         */
        get: operations["getProfitByID"];
        /**
         * Update existing profit
         * @description Returns updated profit data
         */
        put: operations["updateProfit"];
        post?: never;
        /**
         * Delete existing profit
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteProfit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profit/toggle/{profit}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle Profit */
        post: operations["toggleProfit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/province": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get provinces list
         * @description Returns list of provinces
         */
        get: operations["getProvinces"];
        put?: never;
        /**
         * Store new province
         * @description Returns new province data
         */
        post: operations["storeProvince"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/province/{province}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get province information
         * @description Returns province data
         */
        get: operations["getProvinceByID"];
        /**
         * Update existing province
         * @description Returns updated province data
         */
        put: operations["updateProvince"];
        post?: never;
        /**
         * Delete existing province
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteProvince"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get settings list
         * @description Returns list of settings
         */
        get: operations["getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setting/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get setting information
         * @description Returns setting data
         */
        get: operations["getSettingById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setting/show-by-key/{setting}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show the single setting by key
         * @description Show the single setting by key
         */
        get: operations["42a6288483ea594f9cdadef181f57fa8"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setting/{setting}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing setting
         * @description Returns updated setting data
         */
        put: operations["updateSetting"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setting/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Setting data
         * @description Returns Setting data
         */
        get: operations["getSettingData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shipping-method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get shippingMethods list
         * @description Returns list of shippingMethods
         */
        get: operations["getShippingMethods"];
        put?: never;
        /**
         * Store new shippingMethod
         * @description Returns new shippingMethod data
         */
        post: operations["storeShippingMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shipping-method/{shippingMethod}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shippingMethod information
         * @description Returns shippingMethod data
         */
        get: operations["getShippingMethodByID"];
        /**
         * Update existing shippingMethod
         * @description Returns updated shippingMethod data
         */
        put: operations["updateShippingMethod"];
        post?: never;
        /**
         * Delete existing shippingMethod
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteShippingMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shipping-method/toggle/{shippingMethod}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle ShippingMethod */
        post: operations["toggleShippingMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shipping-method/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ShippingMethod data
         * @description Returns ShippingMethod data
         */
        get: operations["getShippingMethodData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get sliders list
         * @description Returns list of sliders
         */
        get: operations["getSliders"];
        put?: never;
        /**
         * Store new slider
         * @description Returns new slider data
         */
        post: operations["storeSlider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slider/{slider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get slider information
         * @description Returns slider data
         */
        get: operations["getSliderByID"];
        /**
         * Update existing slider
         * @description Returns updated slider data
         */
        put: operations["updateSlider"];
        post?: never;
        /**
         * Delete existing slider
         * @description Deletes a record and returns true
         */
        delete: operations["deleteSlider"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slider/toggle/{slider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle Slider */
        post: operations["toggleSlider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slider}/slider-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get sliderItems list
         * @description Returns list of sliderItems
         */
        get: operations["getSliderItems"];
        put?: never;
        /**
         * Store new sliderItem
         * @description Returns new sliderItem data
         */
        post: operations["storeSliderItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{slider}/slider-item/{sliderItem}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sliderItem information
         * @description Returns sliderItem data
         */
        get: operations["getSliderItemByID"];
        /**
         * Update existing sliderItem
         * @description Returns updated sliderItem data
         */
        put: operations["updateSliderItem"];
        post?: never;
        /**
         * Delete existing sliderItem
         * @description Deletes a record and returns true
         */
        delete: operations["deleteSliderItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slider-item/toggle/{sliderItem}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle sliderItem */
        post: operations["toggleSliderItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slider-item/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sliderItem data
         * @description Returns sliderItem data
         */
        get: operations["getSliderItemData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/splash-admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * splash
         * @description Returns splash
         */
        get: operations["splashAdmin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/splash-site": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * splash
         * @description Returns splash
         */
        get: operations["splashSite"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/splash-app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * splash
         * @description Returns splash
         */
        get: operations["splashApp"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get stories list
         * @description Returns list of stories
         */
        get: operations["getStories"];
        put?: never;
        /**
         * Store new story
         * @description Returns new story data
         */
        post: operations["storeStory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/{story}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get story information
         * @description Returns story data
         */
        get: operations["getStoryByID"];
        /**
         * Update existing story
         * @description Returns updated story data
         */
        put: operations["updateStory"];
        post?: never;
        /**
         * Delete existing story
         * @description Deletes a record and returns true
         */
        delete: operations["deleteStory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/toggle/{story}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle Story */
        post: operations["toggleStory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/like/{story}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Like Story
         * @description Like Story
         */
        post: operations["likeStory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Story data
         * @description Returns Story data
         */
        get: operations["getStoryData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Read Stories
         * @description Read Stories
         */
        post: operations["readStories"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get tags list
         * @description Returns list of tags
         */
        get: operations["getTags"];
        put?: never;
        /**
         * Store new tag
         * @description Returns new tag data
         */
        post: operations["storeTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tag information
         * @description Returns tag data
         */
        get: operations["getTagByID"];
        /**
         * Update existing tag
         * @description Returns updated tag data
         */
        put: operations["updateTag"];
        post?: never;
        /**
         * Delete existing tag
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tag data
         * @description Returns Tag data
         */
        get: operations["getTagData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get taxs list
         * @description Returns list of taxs
         */
        get: operations["getTaxs"];
        put?: never;
        /**
         * Store new tax
         * @description Returns new tax data
         */
        post: operations["storeTax"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tax/{tax}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tax information
         * @description Returns tax data
         */
        get: operations["getTaxByID"];
        /**
         * Update existing tax
         * @description Returns updated tax data
         */
        put: operations["updateTax"];
        post?: never;
        /**
         * Delete existing tax
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteTax"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tax/toggle/{tax}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle existing tax
         * @description Toggle a record and returns updated tax data
         */
        post: operations["toggleTax"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["test"];
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["testPut"];
        trace?: never;
    };
    "/ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get tickets list
         * @description Returns list of tickets
         */
        get: operations["getTickets"];
        put?: never;
        /**
         * Store new ticket
         * @description Returns new ticket data
         */
        post: operations["storeTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/{ticket}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ticket information
         * @description Returns ticket data
         */
        get: operations["getTicketByUUID"];
        /**
         * Update existing ticket
         * @description Returns updated ticket data
         */
        put: operations["updateTicket"];
        post?: never;
        /**
         * Delete existing ticket
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteTicket"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get ticketMessages list
         * @description Returns list of ticketMessages
         */
        get: operations["getTicketMessages"];
        put?: never;
        /**
         * Store new ticketMessage
         * @description Returns new ticketMessage data
         */
        post: operations["storeTicketMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-message/{ticketMessage}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ticketMessage information
         * @description Returns ticketMessage data
         */
        get: operations["getTicketMessageByUUID"];
        /**
         * Update existing ticketMessage
         * @description Returns updated ticketMessage data
         */
        put: operations["updateTicketMessage"];
        post?: never;
        /**
         * Delete existing ticketMessage
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteTicketMessage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get units list
         * @description Returns list of units
         */
        get: operations["getUnits"];
        put?: never;
        /**
         * Store new unit
         * @description Returns new unit data
         */
        post: operations["storeUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unit/{unit}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get unit information
         * @description Returns unit data
         */
        get: operations["getUnitByID"];
        /**
         * Update existing unit
         * @description Returns updated unit data
         */
        put: operations["updateUnit"];
        post?: never;
        /**
         * Delete existing unit
         * @description Deletes a record and returns true
         */
        delete: operations["deleteUnit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unit/toggle/{unit}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle unit as published or unpublished
         * @description Toggle unit as published or unpublished
         */
        post: operations["toggleUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unit/make-default/{unit}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Make unit as default */
        post: operations["DefaultUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unit/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unit data
         * @description Returns Unit data
         */
        get: operations["getUnitData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get users list
         * @description Returns list of users
         */
        get: operations["getUsers"];
        put?: never;
        /**
         * Store new user
         * @description Returns new user data
         */
        post: operations["storeUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user information
         * @description Returns user data
         */
        get: operations["getUserById"];
        /**
         * Update existing user
         * @description Returns updated user data
         */
        put: operations["updateUser"];
        post?: never;
        /**
         * Delete existing user
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get userGroups list
         * @description Returns list of userGroups
         */
        get: operations["getUserGroups"];
        put?: never;
        /**
         * Store new userGroup
         * @description Returns new userGroup data
         */
        post: operations["storeUserGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-group/{userGroup}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get userGroup information
         * @description Returns userGroup data
         */
        get: operations["getUserGroupByID"];
        /**
         * Update existing userGroup
         * @description Returns updated userGroup data
         */
        put: operations["updateUserGroup"];
        post?: never;
        /**
         * Delete existing userGroup
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteUserGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-group/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get UserGroup data
         * @description Returns UserGroup data
         */
        get: operations["getUserGroupData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get userRequests list
         * @description Returns list of userRequests
         */
        get: operations["getUserRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/show/{userRequest}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get userRequest information
         * @description Returns userRequest data
         */
        get: operations["getUserRequestByID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/bulk-purchase-request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Store new userRequest
         * @description Returns new userRequest data
         */
        post: operations["storeBulkPurchaseRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/bulk-purchase-request/{userRequest}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing userRequest
         * @description Returns updated userRequest data
         */
        put: operations["updateBulkPurchaseRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/notify-when-available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Store new userRequest
         * @description Returns new userRequest data
         */
        post: operations["storeNotifyWhenAvailableRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/notify-when-available/{userRequest}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing userRequest
         * @description Returns updated userRequest data
         */
        put: operations["updateNotifyWhenAvailableRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/{userRequest}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete existing userRequest
         * @description Deletes a record and returns no content
         */
        delete: operations["deleteUserRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/confirm/{userRequest}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** confirm UserRequest */
        post: operations["confirmUserRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/reject/{userRequest}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** reject UserRequest */
        post: operations["rejectUserRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-request/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get UserRequest data
         * @description Returns UserRequest data
         */
        get: operations["getUserRequestData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/upload/private": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** upload in private */
        post: operations["uploadPrivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/select/{model}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** for use in select box */
        get: operations["selectByModel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adaptive-filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** returns adaptive filter options */
        get: operations["adaptiveFilter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adaptive-search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** returns adaptive search result */
        post: operations["adaptiveSearch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BooleanEnum: {
            /**
             * @default 1
             * @enum {boolean}
             */
            value: 1 | 0;
            /** @default Enable */
            label: string;
            /** @default success */
            color: string;
        };
        YesNoEnum: {
            /**
             * @default 1
             * @enum {boolean}
             */
            value: 1 | 0;
            /** @default Yes */
            label: string;
            /** @default success */
            color: string;
        };
        CategoryTypeEnum: {
            /**
             * @default product
             * @enum {string}
             */
            value: "blog" | "product" | "notice" | "portfolio" | "faq" | "report";
            /** @default Product */
            label: string;
        };
        LayoutSectionModeEnum: {
            /**
             * @default STATIC
             * @enum {string}
             */
            value: "AUTO_PLAY_CAROUSEL" | "CAROUSEL" | "STATIC" | "GRID";
            /** @default static */
            label: string;
        };
        LayoutSectionTypeEnum: {
            /**
             * @default STORY
             * @enum {string}
             */
            value: "STORY" | "SLIDER" | "SPECIAL_SELL" | "CATEGORY" | "PRODUCT" | "BEST_SELLER_CATEGORIES" | "MAIN_CATEGORIES" | "BANNER" | "BRAND" | "BRANDS" | "TAGS" | "TAG";
            /** @default story */
            label: string;
        };
        PlatformEnum: {
            /**
             * @default android
             * @enum {string}
             */
            value: "android" | "ios" | "website" | "dashboard";
            /** @default Android */
            label: string;
        };
        PriceTypeEnum: {
            /**
             * @default normal_percent
             * @enum {string}
             */
            value: "application_percent" | "website_percent";
            /** @default Normal Percent */
            label: string;
        };
        ProductInterfaceTypeEnum: {
            /**
             * @default simple
             * @enum {string}
             */
            value: "simple" | "codding";
            /** @default SIMPLE */
            label: string;
        };
        SliderItemTypeEnum: {
            /**
             * @default product
             * @enum {string}
             */
            value: "product" | "brand" | "category" | "discount" | "link" | "filter";
            /** @default Product */
            label: string;
        };
        StoryTypeEnum: {
            /**
             * @default product
             * @enum {string}
             */
            value: "product" | "category" | "brand" | "discount" | "link" | "filter";
            /** @default Product */
            label: string;
        };
        UnitTypeEnum: {
            /**
             * @default count
             * @enum {string}
             */
            value: "count" | "weight" | "length";
            /** @default counting unit */
            label: string;
        };
        AttributeTypeEnum: {
            /**
             * @default color
             * @enum {string}
             */
            value: "text" | "color";
            /** @default Color */
            label: string;
        };
        UserRequestStatusEnum: {
            /**
             * @default PENDING
             * @enum {string}
             */
            value: "PENDING" | "CONFIRMED" | "REJECTED";
            /** @default Pending */
            label: string;
            /** @default secondary */
            color: string;
        };
        UserRequestTypeEnum: {
            /**
             * @default PENDING
             * @enum {string}
             */
            value: "PENDING" | "CONFIRMED" | "REJECTED";
            /** @default Pending */
            label: string;
        };
        PriceResource: {
            /**
             * Format: float
             * @default 10000.00
             */
            value: number;
            /** @default 10,000 */
            formatted: string;
            /** @default ₹ */
            symbol: string;
            /** @default true */
            is_symbol_left: boolean;
        };
        UserGroupEnum: {
            /**
             * @default retail
             * @enum {string}
             */
            value: "retail" | "wholesale";
            /** @default Retailer */
            label: string;
        };
        UserGroupExceptionTypeEnum: {
            /**
             * @default brand
             * @enum {string}
             */
            value: "brand" | "category" | "tag";
            /** @default Brand */
            label: string;
        };
        ShippingMethodDriverEnum: {
            /**
             * @default bike
             * @enum {string}
             */
            value: "bike" | "freight" | "post" | "tipax" | "bus" | "inperson";
            /** @default Bike */
            label: string;
        };
        TagTypeEnum: {
            /**
             * @default special
             * @enum {string}
             */
            value: "special";
            /** @default Special */
            label: string;
        };
        LocalPriceEnum: {
            /**
             * Format: float
             * @default 0
             */
            value: number;
            /** @default 0 */
            formatted: string;
            /** @default IRT */
            symbol: string;
            /**
             * @default 0
             * @enum {boolean}
             */
            is_symbol_left: 0 | 1;
        };
        /** Pagination */
        Meta: {
            /**
             * @description Current page number
             * @default 1
             */
            current_page: number;
            /**
             * @description First page number
             * @default 1
             */
            from: number;
            /**
             * @description Last page number
             * @default 3
             */
            last_page: number;
            /**
             * @description Links of pages
             * @default [
             *       {
             *         "url": null,
             *         "label": "&laquo; Previous",
             *         "active": false
             *       },
             *       {
             *         "url": "http://localhost:8000/api/v1/category?page=1",
             *         "label": "1",
             *         "active": true
             *       },
             *       {
             *         "url": "http://localhost:8000/api/v1/category?page=2",
             *         "label": "2",
             *         "active": false
             *       },
             *       {
             *         "url": "http://127.0.0.1:8000/api/v1/category?page=3",
             *         "label": "3",
             *         "active": false
             *       },
             *       {
             *         "url": "http://localhost:8000/api/v1/category?page=2",
             *         "label": "Next &raquo;",
             *         "active": false
             *       }
             *     ]
             */
            links: {
                /**
                 * @description Url of page
                 * @default http://localhost:8000/api/v1/shift?page=1
                 */
                url: string;
                /**
                 * @description Label of page
                 * @default 1
                 */
                label: string;
                /**
                 * @description this page is active or not
                 * @default true
                 */
                active: boolean;
            }[];
            /**
             * @description Base url path
             * @default http://localhost:8000/api/v1/category
             */
            path: string;
            /**
             * @description Number of items per page
             * @default 15
             */
            per_page: number;
            /**
             * @description Last page number
             * @default 10
             */
            to: number;
            /**
             * @description number of records
             * @default 50
             */
            total: number;
        };
        /** Pagination */
        Pagination: {
            /** @default example message */
            message: string;
            data?: Record<string, never>[];
            meta?: components["schemas"]["Meta"];
        };
        /** CheckRequest */
        CheckRequest: {
            /**
             * @description Mobile number
             * @default 09100000000
             */
            mobile: string;
            /**
             * @description Email
             * @default
             */
            email: string;
        };
        /**
         * ConfirmRequest
         * @description Confirm request
         */
        ConfirmRequest: {
            /**
             * @description User id
             * @default 1
             */
            user_id: number;
            /**
             * @description Code
             * @default 12345
             */
            code: string;
        };
        /**
         * ForgetPasswordRequest
         * @description Forget password request
         */
        ForgetPasswordRequest: {
            /**
             * @default mobile
             * @enum {string}
             */
            type: "email" | "mobile";
            /** @default 09100000000 */
            mobile: string;
            /** @default  */
            email: string | null;
        };
        /**
         * google callback request
         * @description GoogleCallbackRequest request body data
         */
        GoogleCallbackRequest: {
            /** @default  */
            token: string;
        };
        /** History Export request */
        HistoryExportRequest: {
            /**
             * @default user
             * @enum {string}
             */
            type: "user" | "profile";
            /** @default  */
            user_id: number | null;
            /** @default  */
            profile_id: number | null;
        };
        /**
         * LoginForAdminRequest
         * @description LoginForAdminRequest request
         */
        LoginForAdminRequest: {
            /**
             * @description User email
             * @default admin@gmail.com
             */
            email: string;
            /**
             * @description User mobile
             * @default 09151111111
             */
            mobile: string;
            /**
             * @description Password
             * @default password
             */
            password: string;
        };
        /**
         * LoginRequest
         * @description Login request
         */
        LoginRequest: {
            /**
             * @description User ID
             * @default 1
             */
            user_id: number;
            /**
             * @description Password
             * @default password
             */
            password: string;
        };
        /** Read Story request */
        ReadStoryRequest: {
            story_ids: number[];
        };
        /**
         * RegisterRequest
         * @description Register request
         */
        RegisterRequest: {
            /**
             * @description Type of registration
             * @default mobile
             * @enum {string}
             */
            type: "email" | "mobile";
            /**
             * @description Mobile number
             * @default 09100000000
             */
            mobile: string;
            /**
             * @description Email address
             * @default
             */
            email: string;
        };
        ReplyByAdminToCommentRequest: {
            /** @default  */
            reply: string;
        };
        /** ResendCodeRequest */
        ResendCodeRequest: {
            /**
             * @description User id
             * @default 1
             */
            user_id: number;
            /**
             * @description Type of the user
             * @default mobile
             * @enum {string}
             */
            type: "email" | "mobile";
        };
        /**
         * SetPasswordRequest
         * @description Set password request
         */
        SetPasswordRequest: {
            /** @default password */
            password: string;
            /** @default password */
            password_confirmation: string;
        };
        /**
         * Store ActivationCode request
         * @description Store ActivationCode request body data
         */
        StoreActivationCodeRequest: {
            /**
             * name
             * @description Name of the new activationCode
             * @default
             */
            name: string;
        };
        /**
         * Store Address request
         * @description Store Address request body data
         */
        StoreAddressRequest: {
            /** @default test title */
            title: string;
            /**
             * @default user
             * @enum {string}
             */
            model_type: "user" | "company" | "warehouse";
            /** @default 1 */
            model_id: number;
            /** @default 1 */
            country_id: number;
            /** @default 1 */
            province_id: number;
            /** @default 1 */
            city_id: number;
            /** @default test address */
            address: string;
            /** @default 1234567890 */
            postal_code: string;
            /** @default 54 */
            pluck: string;
            /** @default 2 */
            unit: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            is_receiver: 0 | 1;
            /** @default  */
            another_name: string;
            /** @default  */
            phone: string;
            /** @default  */
            latitude: string;
            /** @default  */
            longitude: string;
            /** @default  */
            name: string;
            /** @default  */
            family: string;
        };
        /** Store AttributeGroup request */
        StoreAttributeGroupRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            attribute_ids?: number[] | null;
        };
        /**
         * Store Attribute request
         * @description Store Attribute request body data
         */
        StoreAttributeRequest: {
            /** @default test title */
            title: string;
            /**
             * @default color
             * @enum {string}
             */
            type: "color" | "text";
            /**
             * @default 1
             * @enum {boolean}
             */
            filterable: 0 | 1;
            /**
             * @default 1
             * @enum {boolean}
             */
            comparable: 0 | 1;
            /**
             * @default 0
             * @enum {boolean}
             */
            special: 0 | 1;
            /** @default 1 */
            order: number;
        };
        /**
         * Store AttributeValue request
         * @description Store AttributeValue request body data
         */
        StoreAttributeValueRequest: {
            /** @default test title */
            title: string;
            /** @default 1 */
            order: number;
        };
        /** Store Bank request */
        StoreBankRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Store Banner request */
        StoreBannerRequest: {
            /** @default banner title */
            title: string;
            /** @default banner description */
            description: string;
            /**
             * @default 0
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * @default 1x1
             * @enum {string}
             */
            size: "1x1";
            buttons: {
                title?: {
                    /** @default fa */
                    locale: string;
                    /** @default text */
                    value: string;
                }[];
                /**
                 * @default primary
                 * @enum {string}
                 */
                type: "primary" | "secondary" | "success" | "danger" | "warning" | "info";
                /**
                 * @default outlined
                 * @enum {string}
                 */
                style: "outline" | "inline";
                /** @default https://example.com */
                link: string;
            }[];
            /** @default #ffffff */
            background_color: string;
            image?: Record<string, never>;
            pattern?: Record<string, never>;
        };
        /**
         * Store Brand request
         * @description Store Brand request body data
         */
        StoreBrandRequest: {
            /** @default brand title */
            title: string;
            /** @default brand description */
            description: string;
            /** @default 1 */
            ordering: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /** @default SEO title */
            seo_title: string;
            /** @default SEO description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            image: Record<string, never>;
        };
        StoreCartRequest: {
            /** @example 1 */
            product_id: number;
            /** @example 1 */
            quantity: number;
            /** @example 1 */
            unit_id?: number;
        };
        /**
         * Store Category request
         * @description Store Category request body data
         */
        StoreCategoryRequest: {
            /** @default category title */
            title: string;
            /**
             * @default product
             * @enum {string}
             */
            type: "product" | "blog" | "notice" | "portfolio" | "faq" | "report" | "highlight";
            /** @default category description */
            description: string;
            /** @default category body */
            body: string;
            /** @default 1 */
            parent_id: number;
            image: Record<string, never>;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default 1 */
            ordering: number;
            tags?: string[] | null;
            /** @default SEO title */
            seo_title: string;
            /** @default SEO description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            /** @default 1 */
            attribute_group_id: number;
        };
        /** Store City request */
        StoreCityRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * Store Comment request
         * @description Store Comment request body data
         */
        StoreCommentRequest: {
            /**
             * @default product-interface
             * @enum {string}
             */
            model: "product-interface" | "blog";
            /** @default 1 */
            model_id: number;
            /** @default example comment */
            comment: string;
            /** @default  */
            parent_id: number | null;
            /** @default  */
            rate: number | null;
        };
        /**
         * Store Country request
         * @description Store Country request body data
         */
        StoreCountryRequest: {
            /** @default  */
            test: string;
        };
        /** Store Currency request */
        StoreCurrencyRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Store Discount request */
        StoreDiscountRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Store History request */
        StoreHistoryRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Store Layout request */
        StoreLayoutRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /** @default test_code */
            code: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
        };
        /** Store LayoutSection request */
        StoreLayoutSectionRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /** @default 1 */
            layout_id: number;
            /**
             * @default PRODUCT
             * @enum {string}
             */
            type: "Story" | "Slider" | "SpecialSell" | "Product" | "Category" | "BestSellerCategories" | "MainCategories" | "CategoryWithChildren" | "Client" | "Faq" | "HtmlBox" | "Opinion" | "Post" | "Banner" | "Brand" | "Brands" | "Tags" | "Tag";
            /**
             * @default GRID
             * @enum {string}
             */
            mode: "AUTO_PLAY_CAROUSEL" | "CAROUSEL" | "STATIC" | "GRID";
            /** @default /product?filter[category]=3 */
            more_action: string;
            /** @default 2024-08-19 07:26:07 */
            expired_at: string;
            /** @default 1 */
            order: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default  */
            product_id: number | null;
            /** @default  */
            category_id: number | null;
            /** @default  */
            brand_id: number | null;
            /** @default  */
            tag_id: number | null;
            /** @default  */
            slider_id: number | null;
            logo?: Record<string, never>;
            image?: Record<string, never>;
        };
        /** Store Order request */
        StoreOrderRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Store OrderStatus request */
        StoreOrderStatusRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Store PaymentMethod request */
        StorePaymentMethodRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * Store PricingPlan request
         * @description Store PricingPlan request body data
         */
        StorePricingPlanRequest: {
            /** @default test title */
            title: string;
            /** @default 30 */
            application_percent: number;
            /** @default 40 */
            website_percent: number;
            /**
             * @default retail
             * @enum {string}
             */
            type: "retail" | "wholesale";
        };
        /**
         * Store ProductInterface request
         * @description Store ProductInterface request body data
         */
        StoreProductInterfaceRequest: {
            /** @default test title */
            title: string;
            /**
             * @default simple
             * @enum {string}
             */
            type: "simple" | "codding";
            /** @default 1 */
            category_id: number;
        };
        /**
         * Store Product request
         * @description Store Product request body data
         */
        StoreProductRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * Store Profile request
         * @description Store Profile request body data
         */
        StoreProfileRequest: {
            /** @default sajad */
            name: string;
            /** @default es */
            family: string;
            /** @default user@gmail.com */
            email: string;
            /** @default 09379150000 */
            mobile: string;
        };
        /** Store Profit request */
        StoreProfitRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default 1 */
            month: number;
            /** @default 5 */
            value: number;
            /** @default 10000000 */
            min_price: number;
            /** @default [
             *       1,
             *       2
             *     ] */
            user_group_ids: number[];
        };
        /** Store Province request */
        StoreProvinceRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * Store Setting request
         * @description Store Setting request body data
         */
        StoreSettingRequest: {
            /**
             * @default product
             * @enum {string}
             */
            template: "product" | "company_info" | "default_image";
            value: {
                /** @default  */
                key: string;
                /** @default  */
                value: string;
            }[];
        };
        /** Store ShippingMethod request */
        StoreShippingMethodRequest: {
            /** @default test title updated */
            title: string;
            /** @default test description updated */
            description: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default 1 */
            order: number;
            /**
             * @default post
             * @enum {string}
             */
            driver: "bike" | "freight" | "post" | "tipax" | "bus" | "inperson";
            rules: {
                /** @default 1 */
                country_id: number;
                /** @default 1 */
                city_id: number;
                /** @default 1 */
                province_id: number;
                /** @default 1000 */
                price: number;
            }[];
        };
        /** Store Slider Item request */
        StoreSliderItemRequest: {
            /** @default test title */
            title: string;
            /**
             * @default product
             * @enum {string}
             */
            type: "product" | "brand" | "category" | "discount" | "link" | "filter";
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * Format: date-time
             * @default
             */
            published_at: string;
            /**
             * Format: date-time
             * @default
             */
            expired_at: string;
            /** @default  */
            product_id: number;
            /** @default  */
            brand_id: number;
            /** @default  */
            category_id: number;
            /** @default  */
            discount_id: number;
            /** @default  */
            link: string;
            /** @default  */
            url: string;
            /**
             * @default 0
             * @enum {boolean}
             */
            has_timer: 1 | 0;
            /** Format: binary */
            media: Record<string, never>;
            user_group_ids?: number[] | null;
            /**
             * Format: date-time
             * @default
             */
            timer_start: string | null;
        };
        /** Store Slider request */
        StoreSliderRequest: {
            /** @default test title */
            title: string;
            /**
             * @default 1
             * @enum {boolean|null}
             */
            published: 1 | 0;
        };
        /** Store Star request */
        StoreStarRequest: {
            /**
             * @default 1
             * @enum {integer}
             */
            star: 1 | 2 | 3 | 4 | 5;
        };
        /** Store Story request */
        StoreStoryRequest: {
            /** @default story title */
            title: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * @default product
             * @enum {string}
             */
            type: "product" | "category" | "brand" | "link" | "filter" | "discount";
            /** @default 1 */
            order: number;
            /** @default  */
            product_id: number | null;
            /** @default  */
            category_id: number | null;
            /** @default  */
            brand_id: number | null;
            /** @default  */
            discount_id: number | null;
            /** @default  */
            link: string | null;
            /** @default  */
            url: string | null;
            /**
             * @default 0
             * @enum {boolean}
             */
            has_timer: 1 | 0;
            media: Record<string, never>;
            /**
             * Format: date
             * @default
             */
            expired_at: string | null;
            /**
             * Format: date
             * @default
             */
            published_at: string | null;
            tags?: string[] | null;
            category_ids?: number[] | null;
            user_group_ids?: number[] | null;
            /**
             * Format: date-time
             * @default
             */
            timer_start: string | null;
        };
        /** Store Tag request */
        StoreTagRequest: {
            /** @default tag name */
            name: string;
            /**
             * @default special
             * @enum {string}
             */
            type: "special";
            /** @default 1 */
            order_column: number;
            /** Format: binary */
            image?: Record<string, never>;
        };
        /**
         * Store Tax request
         * @description Store Tax request body data
         */
        StoreTaxRequest: {
            /** @default test title */
            title: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /** @default 0 */
            rate: number;
        };
        /**
         * Store TicketMessage request
         * @description Store TicketMessage request body data
         */
        StoreTicketMessageRequest: {
            /** @default  */
            test: string;
        };
        /**
         * Store Ticket request
         * @description Store Ticket request body data
         */
        StoreTicketRequest: {
            /** @default  */
            test: string;
        };
        /**
         * Store Translation request
         * @description Store Translation request body data
         */
        StoreTranslationRequest: {
            /**
             * name
             * @description Name of the new translation
             * @default
             */
            name: string;
        };
        /**
         * Store Unit request
         * @description Store Unit request body data
         */
        StoreUnitRequest: {
            /** @default test title */
            title: string;
            /**
             * @default count
             * @enum {string}
             */
            type: "count" | "weight" | "length";
            /** @default 1 */
            value: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
        };
        /** Store UserGroup request */
        StoreUserGroupRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /** @default 0 */
            min_price: number;
            /** @default 0 */
            order_count: number;
            /** @default 1 */
            pricing_plan_id: number;
            /**
             * @default retail
             * @enum {string}
             */
            type: "retail" | "wholesale";
            exceptions: {
                /**
                 * @default brand
                 * @enum {string}
                 */
                type: "brand" | "category" | "tag";
                /** @default 1 */
                value: number;
                /** @default 10 */
                application_percent: number;
                /** @default 10 */
                website_percent: number;
            }[];
            /** @default [
             *       1,
             *       2
             *     ] */
            profit_ids: number[];
        };
        /**
         * Store User request
         * @description Store User request body data
         */
        StoreUserRequest: {
            /**
             * name
             * @description Name of the new user
             * @default
             */
            name: string;
        };
        /** Store UserRequest request */
        StoreUserRequestBulkPurchaseRequest: {
            /** @default test title */
            title: string;
            /** @default test body */
            body: string;
            /** @description required if type is bulk_purchase */
            products: {
                /** @default 1 */
                product_id: number;
                /** @default 1 */
                quantity: number;
            }[];
        };
        /** StoreUserRequestNotifyWhenAvailableRequest */
        StoreUserRequestNotifyWhenAvailableRequest: {
            /**
             * @description Product Variant ID
             * @default 1
             */
            product_id: number;
            /**
             * @description Quantity you need: default is 1 if you dont send this
             * @default
             */
            quantity: number;
        };
        /** Store UserRequest request */
        StoreUserRequestRequest: {
            /** @default test title */
            title: string;
            /** @default test body */
            body: string;
            /**
             * @default bulk_purchase
             * @enum {string}
             */
            type: "bulk_purchase";
            /** @description required if type is bulk_purchase */
            products?: {
                /** @default 1 */
                product_id: number;
                /** @default 1 */
                quantity: number;
            }[];
        };
        /**
         * Update ActivationCode request
         * @description Update ActivationCode request body data
         */
        UpdateActivationCodeRequest: {
            /**
             * name
             * @description Name of the updated activationCode
             * @default
             */
            name: string;
        };
        /**
         * Update Address request
         * @description Update Address request body data
         */
        UpdateAddressRequest: {
            /** @default address title updated */
            title: string;
            /**
             * @default user
             * @enum {string}
             */
            model_type: "user" | "company" | "warehouse";
            /** @default 1 */
            model_id: number;
            /** @default 1 */
            country_id: number;
            /** @default 1 */
            province_id: number;
            /** @default 1 */
            city_id: number;
            /** @default test address updated */
            address: string;
            /** @default 1234567890 */
            postal_code: string;
            /** @default 54 */
            pluck: string;
            /** @default 2 */
            unit: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            is_receiver: 0 | 1;
            /** @default  */
            another_name: string;
            /** @default  */
            phone: string;
            /** @default  */
            latitude: string;
            /** @default  */
            longitude: string;
            /** @default  */
            name: string;
            /** @default  */
            family: string;
        };
        /** Update AttributeGroup request */
        UpdateAttributeGroupRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            attribute_ids?: number[] | null;
        };
        /**
         * Update Attribute request
         * @description Update Attribute request body data
         */
        UpdateAttributeRequest: {
            /** @default test title */
            title: string;
            /**
             * @default coloer
             * @enum {string}
             */
            type: "color" | "text";
            /**
             * @default 1
             * @enum {boolean}
             */
            filterable: 0 | 1;
            /**
             * @default 1
             * @enum {boolean}
             */
            comparable: 0 | 1;
            /**
             * @default 0
             * @enum {boolean}
             */
            special: 0 | 1;
            /** @default 1 */
            order: number;
        };
        /**
         * Update AttributeValue request
         * @description Update AttributeValue request body data
         */
        UpdateAttributeValueRequest: {
            /** @default test title */
            title: string;
            /** @default 1 */
            order: number;
        };
        /** Update Bank request */
        UpdateBankRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Update Banner request */
        UpdateBannerRequest: {
            /** @default banner title */
            title: string;
            /** @default banner description */
            description: string;
            /**
             * @default 0
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * @default 1x1
             * @enum {string}
             */
            size: "1x1";
            buttons: {
                title?: {
                    /** @default fa */
                    locale: string;
                    /** @default text */
                    value: string;
                }[];
                /**
                 * @default primary
                 * @enum {string}
                 */
                type: "primary" | "secondary" | "success" | "danger" | "warning" | "info";
                /**
                 * @default outlined
                 * @enum {string}
                 */
                style: "outline" | "inline";
                /** @default https://example.com */
                link: string;
            }[];
            /** @default #ffffff */
            background_color: string;
            image?: Record<string, never>;
            pattern?: Record<string, never>;
        };
        /**
         * Update Brand request
         * @description Update Brand request body data
         */
        UpdateBrandRequest: {
            /** @default brand title */
            title: string;
            /** @default brand description */
            description: string;
            /** @default brand-slug */
            slug: string;
            /** @default 1 */
            ordering: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /** @default SEO title */
            seo_title: string;
            /** @default SEO description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            image?: Record<string, never>;
        };
        /**
         * Update Category request
         * @description Update Category request body data
         */
        UpdateCategoryRequest: {
            /** @default category title */
            title: string;
            /** @default category-slug */
            slug: string;
            /**
             * @default product
             * @enum {string}
             */
            type: "product" | "blog" | "notice" | "portfolio" | "faq" | "report" | "highlight";
            /** @default category description */
            description: string;
            /** @default category body */
            body: string;
            /** @default 1 */
            parent_id: number;
            image?: Record<string, never>;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default 1 */
            ordering: number;
            tags?: string[] | null;
            /** @default SEO title */
            seo_title: string;
            /** @default SEO description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            /** @default 1 */
            attribute_group_id: number;
        };
        /** Update City request */
        UpdateCityRequest: {
            /** @default test title updated */
            title: string;
            /** @default test description updated */
            description: string;
        };
        /** Update Comment request */
        UpdateCommentRequest: {
            /** @default example comment */
            comment: string;
            /** @default  */
            rate: number | null;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
        };
        /**
         * Update Country request
         * @description Update Country request body data
         */
        UpdateCountryRequest: {
            /** @default  */
            test: string;
        };
        /** Update Currency request */
        UpdateCurrencyRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Update Discount request */
        UpdateDiscountRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Update History request */
        UpdateHistoryRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Update Layout request */
        UpdateLayoutRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /** @default test_code */
            code: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
        };
        /** Update LayoutSection request */
        UpdateLayoutSectionRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /**
             * @default PRODUCT
             * @enum {string}
             */
            type: "Story" | "Slider" | "SpecialSell" | "Product" | "Category" | "BestSellerCategories" | "MainCategories" | "CategoryWithChildren" | "Client" | "Faq" | "HtmlBox" | "Opinion" | "Post" | "Banner" | "Brand" | "Brands" | "Tags" | "Tag";
            /**
             * @default GRID
             * @enum {string}
             */
            mode: "AUTO_PLAY_CAROUSEL" | "CAROUSEL" | "STATIC" | "GRID";
            /** @default /product?filter[category]=3 */
            more_action: string;
            /** @default 2024-08-19 07:26:07 */
            expired_at: string;
            /** @default 1 */
            order: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default  */
            product_id: number | null;
            /** @default  */
            category_id: number | null;
            /** @default  */
            brand_id: number | null;
            /** @default  */
            tag_id: number | null;
            /** @default  */
            slider_id: number | null;
            logo?: Record<string, never>;
            image?: Record<string, never>;
        };
        /** Update Order request */
        UpdateOrderRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Update OrderStatus request */
        UpdateOrderStatusRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /** Update PaymentMethod request */
        UpdatePaymentMethodRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * Update PricingPlan request
         * @description Update PricingPlan request body data
         */
        UpdatePricingPlanRequest: {
            /** @default test title */
            title: string;
            /** @default 30 */
            application_percent: number;
            /** @default 40 */
            website_percent: number;
            /**
             * @default retail
             * @enum {string}
             */
            type: "retail" | "wholesale";
        };
        /** UpdateProductInterfaceAttributesProductsRequest */
        UpdateProductInterfaceAttributesProductsRequest: {
            attributes: {
                /** @default 1 */
                attribute_id: number;
                /** @default 1 */
                codding: boolean;
                /** @default 1 */
                special: boolean;
                /** @default [
                 *       1,
                 *       2
                 *     ] */
                values: number[];
            }[];
            products: {
                /** @default 1 */
                id: number;
                /** @default sku-1 */
                sku: string;
                /** @default 10 */
                stock: number;
                /** @default 1 */
                minimum_sale: number;
                /** @default 10 */
                maximum_sale: number;
                /** @default 1 */
                published: boolean;
                /** @default 1000 */
                wholesale_price: number;
                /** @default 1000 */
                retail_price: number;
                /** @default 1000 */
                weight: number;
                /** @default 1000 */
                height: number;
                /** @default 1000 */
                length: number;
                /** @default 1000 */
                width: number;
                pricing_plans?: {
                    /** @default 1 */
                    pricing_plan_id: number;
                    /** @default 10 */
                    application_percent: number;
                    /** @default 10 */
                    website_percent: number;
                }[] | null;
                attributes?: {
                    /** @default 1 */
                    attribute_id: number;
                    /** @default 1 */
                    value_id: number;
                }[];
            }[];
        };
        /**
         * Update ProductInterface request
         * @description Update ProductInterface request body data
         */
        UpdateProductInterfaceRequest: {
            /** @default updated title */
            title: string;
            /** @default updated description */
            description: string;
            /** @default updated seo title */
            seo_title: string;
            /** @default updated seo description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            /** @default updated body */
            body: string;
            /** @default 1 */
            tax_id: number;
            /** @default [
             *       1
             *     ] */
            retail_unit_ids: number[];
            /** @default [
             *       1
             *     ] */
            wholesale_unit_ids: number[];
            /** @default 1 */
            brand_id: number;
            /** @default 1 */
            category_id: number;
            /** @default [
             *       2,
             *       3
             *     ] */
            categories_id: number[];
            /** @default updated-slug */
            slug: string;
            /**
             * @default codding
             * @enum {string}
             */
            type: "simple" | "codding";
            /** @default 10 */
            warning_quantity: number;
            /**
             * @description min:0|max:100
             * @default 10
             */
            max_discount_percent: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * Format: date
             * @default 2025-01-01
             */
            published_at: string;
            tags?: string[] | null;
            attributes: {
                /** @default 1 */
                attribute_id: number;
                /** @default 1 */
                codding: boolean;
                /** @default 1 */
                special: boolean;
                /** @default [
                 *       1,
                 *       2
                 *     ] */
                values: number[];
            }[];
            /** @description required if type is simple */
            simple_product?: {
                /** @default sku-1 */
                sku: string;
                /** @default 10 */
                stock: number;
                /** @default 1 */
                minimum_sale: number;
                /** @default 10 */
                maximum_sale: number;
                /** @default 1 */
                published: boolean;
                /** @default 1000 */
                wholesale_price: number;
                /** @default 1000 */
                retail_price: number;
                /** @default 1000 */
                weight: number;
                /** @default 1000 */
                height: number;
                /** @default 1000 */
                length: number;
                /** @default 1000 */
                width: number;
                pricing_plans?: {
                    /** @default 1 */
                    pricing_plan_id: number;
                    /** @default 10 */
                    application_percent: number;
                    /** @default 10 */
                    website_percent: number;
                }[] | null;
            } | null;
            /** @description max:10240|mimes:mp4,mov,avi */
            video?: Record<string, never>;
        };
        /**
         * Update Product request
         * @description Update Product request body data
         */
        UpdateProductRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * Update Profile request
         * @description Update Profile request body data
         */
        UpdateProfileRequest: {
            /** @default sajad */
            name: string;
            /** @default es */
            family: string;
            /** @default user@gmail.com */
            email: string;
            /** @default 09379150000 */
            mobile: string;
        };
        /** Update Profit request */
        UpdateProfitRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default 1 */
            month: number;
            /** @default 5 */
            value: number;
            /** @default 10000000 */
            min_price: number;
            /** @default [
             *       1,
             *       2
             *     ] */
            user_group_ids: number[];
        };
        /** Update Province request */
        UpdateProvinceRequest: {
            /** @default test title updated */
            title: string;
            /** @default test description updated */
            description: string;
        };
        /**
         * Update Setting request
         * @description Update Setting request body data
         */
        UpdateSettingRequest: {
            /**
             * @default product
             * @enum {string}
             */
            template: "product" | "company_info" | "default_image";
            value: {
                /** @default  */
                key: string;
                /** @default  */
                value: string;
            }[];
        };
        /** Update ShippingMethod request */
        UpdateShippingMethodRequest: {
            /** @default test title updated */
            title: string;
            /** @default test description updated */
            description: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 0 | 1;
            /** @default 1 */
            order: number;
            /**
             * @default post
             * @enum {string}
             */
            driver: "bike" | "freight" | "post" | "tipax" | "bus" | "inperson";
            rules: {
                /** @default 1 */
                country_id: number;
                /** @default 1 */
                city_id: number;
                /** @default 1 */
                province_id: number;
                /** @default 1000 */
                price: number;
            }[];
        };
        /** Update Slider Item request */
        UpdateSliderItemRequest: {
            /** @default test title updated */
            title: string;
            /**
             * @default product
             * @enum {string}
             */
            type: "product" | "brand" | "category" | "discount" | "link" | "filter";
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * Format: date-time
             * @default
             */
            published_at: string;
            /**
             * Format: date-time
             * @default
             */
            expired_at: string;
            /** @default  */
            product_id: number;
            /** @default  */
            brand_id: number;
            /** @default  */
            category_id: number;
            /** @default  */
            discount_id: number;
            /** @default  */
            link: string;
            /** @default  */
            url: string;
            /**
             * @default 0
             * @enum {boolean}
             */
            has_timer: 1 | 0;
            /** Format: binary */
            media?: Record<string, never>;
            user_group_ids?: number[] | null;
            /**
             * Format: date-time
             * @default
             */
            timer_start: string | null;
        };
        /** Update Slider request */
        UpdateSliderRequest: {
            /** @default test title */
            title: string;
            /**
             * @default 1
             * @enum {boolean|null}
             */
            published: 1 | 0;
        };
        /** Update Story request */
        UpdateStoryRequest: {
            /** @default story title updated */
            title: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /**
             * @default product
             * @enum {string}
             */
            type: "product" | "category" | "brand" | "link" | "timer" | "filter" | "discount";
            /** @default 1 */
            order: number;
            /** @default  */
            product_id: number | null;
            /** @default  */
            category_id: number | null;
            /** @default  */
            brand_id: number | null;
            /** @default  */
            discount_id: number | null;
            /** @default  */
            link: string | null;
            /** @default  */
            url: string | null;
            /**
             * @default 0
             * @enum {boolean}
             */
            has_timer: 1 | 0;
            media?: Record<string, never>;
            /**
             * Format: date
             * @default
             */
            expired_at: string | null;
            /**
             * Format: date
             * @default
             */
            published_at: string | null;
            tags?: string[] | null;
            category_ids?: number[] | null;
            user_group_ids?: number[] | null;
            /**
             * Format: date-time
             * @default
             */
            timer_start: string | null;
        };
        /** Update Tag request */
        UpdateTagRequest: {
            /** @default tag name updated */
            name: string;
            /**
             * @default special
             * @enum {string}
             */
            type: "special";
            /** @default 1 */
            order_column: number;
            /** Format: binary */
            image?: Record<string, never>;
        };
        /**
         * Update Tax request
         * @description Update Tax request body data
         */
        UpdateTaxRequest: {
            /** @default updated title */
            title: string;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
            /** @default 0 */
            rate: number;
        };
        /**
         * Update TicketMessage request
         * @description Update TicketMessage request body data
         */
        UpdateTicketMessageRequest: {
            /** @default  */
            test: string;
        };
        /**
         * Update Ticket request
         * @description Update Ticket request body data
         */
        UpdateTicketRequest: {
            /** @default  */
            test: string;
        };
        /**
         * Update Translation request
         * @description Update Translation request body data
         */
        UpdateTranslationRequest: {
            /**
             * name
             * @description Name of the updated translation
             * @default
             */
            name: string;
        };
        /**
         * Update Unit request
         * @description Update Unit request body data
         */
        UpdateUnitRequest: {
            /** @default test title */
            title: string;
            /**
             * @default count
             * @enum {string}
             */
            type: "count" | "weight" | "length";
            /** @default 1 */
            value: number;
            /**
             * @default 1
             * @enum {boolean}
             */
            published: 1 | 0;
        };
        /** Update UserGroup request */
        UpdateUserGroupRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
            /** @default 0 */
            min_price: number;
            /** @default 0 */
            order_count: number;
            /** @default 1 */
            pricing_plan_id: number;
            /**
             * @default retail
             * @enum {string}
             */
            type: "retail" | "wholesale";
            exceptions: {
                /**
                 * @default brand
                 * @enum {string}
                 */
                type: "brand" | "category" | "tag";
                /** @default 1 */
                value: number;
                /** @default 10 */
                application_percent: number;
                /** @default 10 */
                website_percent: number;
            }[];
            /** @default [
             *       1,
             *       2
             *     ] */
            profit_ids: number[];
        };
        /**
         * Update User request
         * @description Update User request body data
         */
        UpdateUserRequest: {
            /**
             * name
             * @description Name of the updated user
             * @default
             */
            name: string;
        };
        /** Update UserRequest request */
        UpdateUserRequestBulkPurchaseRequest: {
            /** @default test title */
            title: string;
            /** @default test body */
            body: string;
            /** @description required if type is bulk_purchase */
            products: {
                /** @default 1 */
                product_id: number;
                /** @default 1 */
                quantity: number;
                /** @default 1 */
                wholesale_price: number;
                /**
                 * @default PENDING
                 * @enum {string}
                 */
                status: "PENDING" | "CONFIRMED" | "REJECTED";
            }[];
            /**
             * @default PENDING
             * @enum {string}
             */
            status: "PENDING" | "CONFIRMED" | "REJECTED";
        };
        /** Update UserRequest request */
        UpdateUserRequestNotifyWhenAvailableRequest: {
            /**
             * @description Product Variant ID
             * @default 1
             */
            product_id: number;
            /**
             * @description Quantity you need: default is 1 if you dont send this
             * @default
             */
            quantity: number;
        };
        /** Update UserRequest request */
        UpdateUserRequestRequest: {
            /** @default test title */
            title: string;
            /** @default test description */
            description: string;
        };
        /**
         * ActivationCodeResource
         * @description ActivationCode resource
         */
        ActivationCodeResource: {
            /**
             * @description ActivationCode id
             * @default 1
             */
            id: number;
            /**
             * Format: date-time
             * @description ActivationCode created at
             * @default 2021-09-01T00:00:00+00:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @description ActivationCode updated at
             * @default 2021-09-01T00:00:00+00:00
             */
            updated_at: string;
        };
        /**
         * AddressDetailResource
         * @description AddressDetail resource
         */
        AddressDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Address Title */
            title: string;
            user?: components["schemas"]["UserResource"];
            country?: components["schemas"]["CountryResource"];
            province?: components["schemas"]["ProvinceResource"];
            city?: components["schemas"]["CityResource"];
            /** @default Address Address */
            address: string;
            /**
             * @description Address pluck
             * @default Address Pluck
             */
            pluck: string;
            /**
             * @description Address unit
             * @default Address Unit
             */
            unit: string;
            /** @default Address Postal Code */
            postal_code: string;
            /**
             * @description user is receiver or not
             * @default 1
             */
            is_receiver: boolean;
            extra?: {
                /** @default another user firstname */
                another_firstname: string;
                /** @default another user lastname */
                another_lastname: string;
                /**
                 * @description another user phone
                 * @default 9155555555
                 */
                phone: string;
            } | null;
            /**
             * @description Address latitude
             * @default Address Latitude
             */
            latitude: string;
            /**
             * @description Address longitude
             * @default Address Longitude
             */
            longitude: string;
            /**
             * @description updated_at
             * @default 2024-08-19T07:26:07.000000Z
             */
            updated_at: string;
            /**
             * @description created_at
             * @default 2024-08-19T07:26:07.000000Z
             */
            created_at: string;
            /** @default user */
            morphable_type: string;
            morphable?: components["schemas"]["UserResource"] | null;
        };
        /**
         * AddressResource
         * @description Address resource
         */
        AddressResource: {
            /** @default 1 */
            id: number;
            /** @default Address Title */
            title: string;
            user?: components["schemas"]["UserResource"];
            country?: components["schemas"]["CountryResource"];
            province?: components["schemas"]["ProvinceResource"];
            city?: components["schemas"]["CityResource"];
            /** @default Address Address */
            address: string;
            /**
             * @description Address pluck
             * @default Address Pluck
             */
            pluck: string;
            /**
             * @description Address unit
             * @default Address Unit
             */
            unit: string;
            /** @default Address Postal Code */
            postal_code: string;
            /**
             * @description user is receiver or not
             * @default 1
             */
            is_receiver: boolean;
            extra?: {
                /** @default another user firstname */
                another_firstname: string;
                /** @default another user lastname */
                another_lastname: string;
                /**
                 * @description another user phone
                 * @default 9155555555
                 */
                phone: string;
            } | null;
            /**
             * @description Address latitude
             * @default Address Latitude
             */
            latitude: string;
            /**
             * @description Address longitude
             * @default Address Longitude
             */
            longitude: string;
            /**
             * @description updated_at
             * @default 2024-08-19T07:26:07.000000Z
             */
            updated_at: string;
            /**
             * @description created_at
             * @default 2024-08-19T07:26:07.000000Z
             */
            created_at: string;
            /** @default user */
            morphable_type: string;
            morphable?: components["schemas"]["UserResource"] | null;
        };
        /**
         * AttributeDetailResource
         * @description AttributeDetail resource
         */
        AttributeDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Attribute Title */
            title: string;
            /** @default false */
            codding: boolean;
            type?: components["schemas"]["AttributeTypeEnum"];
            /** @default true */
            filterable: boolean;
            /** @default true */
            comparable: boolean;
            /** @default false */
            special: boolean;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /**
             * @description Attribute ordering
             * @default 1
             */
            order: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            categories?: components["schemas"]["CategoryResource"][];
            values?: components["schemas"]["AttributeValueResource"][];
            groups?: components["schemas"]["AttributeGroupResource"][];
        };
        /** AttributeGroupDetailResource */
        AttributeGroupDetailResource: {
            /** @default 1 */
            id: number;
            /** @default AttributeGroup Title */
            title: string;
            /** @default AttributeGroup Description */
            description: string;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            attributes?: components["schemas"]["AttributeResource"][];
            categories?: components["schemas"]["CategoryResource"][];
        };
        /** AttributeGroupResource */
        AttributeGroupResource: {
            /** @default 1 */
            id: number;
            /** @default AttributeGroup Title */
            title: string;
            /** @default AttributeGroup Description */
            description: string;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * AttributeResource
         * @description Attribute resource
         */
        AttributeResource: {
            /** @default 1 */
            id: number;
            /** @default Attribute Title */
            title: string;
            /** @default false */
            codding: boolean;
            /** @default true */
            filterable: boolean;
            /** @default true */
            comparable: boolean;
            /** @default false */
            special: boolean;
            /**
             * @description Attribute ordering
             * @default 1
             */
            order: number;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * AttributeValueDetailResource
         * @description AttributeValueDetail resource
         */
        AttributeValueDetailResource: {
            /** @default 1 */
            id: number;
            /** @default AttributeValue Title */
            title: string;
            /** @default 1 */
            order: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            /** @default false */
            selected: boolean | null;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            attribute?: components["schemas"]["AttributeResource"];
        };
        /**
         * AttributeValueResource
         * @description AttributeValue resource
         */
        AttributeValueResource: {
            /** @default 1 */
            id: number;
            /** @default AttributeValue Title */
            title: string;
            /** @default 1 */
            order: number;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            /**
             * @description fill from ProductInterfaceDetailResource->attributes
             * @default false
             */
            selected: boolean | null;
        };
        /** BankDetailResource */
        BankDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Bank Title */
            title: string;
            /** @default Bank Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** BankResource */
        BankResource: {
            /** @default 1 */
            id: number;
            /** @default Bank Title */
            title: string;
            /** @default Bank Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** BannerClientResource */
        BannerClientResource: {
            /** @default 1 */
            id: number;
            /** @default Banner Title */
            title: string;
            /** @default Banner Description */
            description: string;
            /** @default 1x1 */
            size: string;
            buttons?: {
                /** @default Button Text */
                title: string;
                /** @default primary */
                type: string;
                /** @default outline */
                style: string;
                /** @default https://example.com */
                link: string;
            }[];
            /** @default #000000 */
            background_color: string;
            image?: components["schemas"]["MediaResource"];
            pattern?: components["schemas"]["MediaResource"];
            published?: components["schemas"]["BooleanEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** BannerDetailResource */
        BannerDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Banner Title */
            title: string;
            /** @default Banner Description */
            description: string;
            /** @default 1x1 */
            size: string;
            buttons?: {
                title?: {
                    /** @default en */
                    locale: string;
                    /** @default login */
                    value: string;
                }[];
                /** @default primary */
                type: string;
                /** @default outline */
                style: string;
                /** @default https://example.com */
                link: string;
            }[];
            /** @default #000000 */
            background_color: string;
            image?: components["schemas"]["MediaResource"];
            pattern?: components["schemas"]["MediaResource"];
            published?: components["schemas"]["BooleanEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** BannerResource */
        BannerResource: {
            /** @default 1 */
            id: number;
            /** @default Banner Title */
            title: string;
            /** @default Banner Description */
            description: string;
            /** @default 1x1 */
            size: string;
            buttons?: {
                title?: {
                    /** @default en */
                    locale: string;
                    /** @default login */
                    value: string;
                }[];
                /** @default primary */
                type: string;
                /** @default outline */
                style: string;
                /** @default https://example.com */
                link: string;
            }[];
            /** @default #000000 */
            background_color: string;
            image?: components["schemas"]["MediaResource"];
            pattern?: components["schemas"]["MediaResource"];
            published?: components["schemas"]["BooleanEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * BrandDetailResource
         * @description BrandDetail resource
         */
        BrandDetailResource: {
            /** @default 1 */
            id: number;
            /** @default brand title */
            title: string;
            /** @default brand description */
            description: string;
            /** @default brand-slug */
            slug: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 1 */
            ordering: number;
            /** @default 10 */
            view_count: number;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default SEO title */
            seo_title: string;
            /** @default SEO description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            image?: components["schemas"]["MediaResource"];
        };
        /**
         * BrandResource
         * @description Brand resource
         */
        BrandResource: {
            /** @default 1 */
            id: number;
            /** @default brand title */
            title: string;
            /** @default brand-slug */
            slug: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 1 */
            ordering: number;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 10 */
            view_count: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            image?: components["schemas"]["MediaResource"];
        };
        /**
         * CategoryDetailResource
         * @description CategoryDetail resource
         */
        CategoryDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Category Title */
            title: string;
            /** @default Category-Slug */
            slug: string;
            /** @default 1 */
            attribute_group_id: number;
            /** @default Category Description */
            description: string;
            /** @default Category Body */
            body: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            type?: components["schemas"]["CategoryTypeEnum"] | null;
            /** @default 1 */
            ordering: number;
            /** @default 0 */
            view_count: number;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default SEO Title */
            seo_title: string;
            /** @default SEO Description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            image?: components["schemas"]["MediaResource"];
            parent?: components["schemas"]["CategoryResource"];
            children?: components["schemas"]["CategoryResource"][];
            /** @default 1 */
            children_count: number;
            attribute_group?: components["schemas"]["AttributeGroupDetailResource"];
            tags?: components["schemas"]["TagResource"][];
            stories?: components["schemas"]["StoryResource"][];
        };
        CategoryClientResource: {
            /** @default 1 */
            id: number;
            /** @default Category Title */
            title: string;
            /** @default Category-Slug */
            slug: string;
            /** @default 1 */
            attribute_group_id: number;
            read_by_user?: boolean | null;
            stories?: components["schemas"]["StoryResource"][];
            image?: components["schemas"]["MediaResource"];
        };
        /**
         * CategoryResource
         * @description Category resource
         */
        CategoryResource: {
            /** @default 1 */
            id: number;
            /** @default Category Title */
            title: string;
            /** @default Category-Slug */
            slug: string;
            /** @default 1 */
            attribute_group_id: number;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 1 */
            ordering: number;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            type?: components["schemas"]["CategoryTypeEnum"] | null;
            /** @default 0 */
            view_count: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            image?: components["schemas"]["MediaResource"];
        };
        /** CityDetailResource */
        CityDetailResource: {
            /** @default 1 */
            id: number;
            /** @default City Title */
            title: string;
            /** @default City Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** CityResource */
        CityResource: {
            /** @default 1 */
            id: number;
            /** @default  */
            name: string;
            country?: components["schemas"]["CountryResource"];
            province?: components["schemas"]["CountryResource"];
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** CommentResource */
        CommentResource: {
            /** @default 1 */
            id: number;
            /** @default example comment */
            comment: string;
            user?: components["schemas"]["UserResource"] | null;
            children?: components["schemas"]["CommentResource"][] | null;
            parent?: components["schemas"]["CommentResource"] | null;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default product-interface */
            morphable_type: string;
            morphable?: components["schemas"]["ProductInterfaceResource"] | components["schemas"]["UserResource"];
        };
        /**
         * CountryDetailResource
         * @description CountryDetail resource
         */
        CountryDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Iran */
            name: string;
            /** @default IRN */
            code: string;
            /** @default 1 */
            published: boolean;
        };
        /**
         * CountryResource
         * @description Country resource
         */
        CountryResource: {
            /** @default 1 */
            id: number;
            /** @default Iran */
            name: string;
            /** @default IRN */
            code: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** CurrencyDetailResource */
        CurrencyDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Currency Name */
            name: string;
            /** @default Currency Code */
            code: string;
            /** @default Currency Symbol */
            symbol: string;
            /** @default 1.00 */
            exchange_rate: number;
            /** @default 0.0000 */
            surcharge: number;
            default?: components["schemas"]["BooleanEnum"] | null;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** CurrencyResource */
        CurrencyResource: {
            /** @default 1 */
            id: number;
            /** @default Currency Name */
            name: string;
            /** @default Currency Code */
            code: string;
            /** @default Currency Symbol */
            symbol: string;
            default?: components["schemas"]["BooleanEnum"] | null;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** DiscountDetailResource */
        DiscountDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Discount Title */
            title: string;
            /** @default Discount Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** DiscountResource */
        DiscountResource: {
            /** @default 1 */
            id: number;
            /** @default Discount Title */
            title: string;
            /** @default Discount Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** HistoryDetailResource */
        HistoryDetailResource: {
            /** @default 1 */
            id: number;
            /** @default History Title */
            title: string;
            /** @default History Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** HistoryResource */
        HistoryResource: {
            /** @default 1 */
            id: number;
            /** @default History Title */
            title: string;
            /** @default History Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** LayoutDetailResource */
        LayoutDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Layout Title */
            title: string;
            /** @default Layout Description */
            description: string;
            /** @default layout_code */
            code: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            sections?: components["schemas"]["LayoutSectionResource"][] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** LayoutResource */
        LayoutResource: {
            /** @default 1 */
            id: number;
            /** @default Layout Title */
            title: string;
            /** @default Layout Description */
            description: string;
            /** @default layout_code */
            code: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** LayoutSectionDetailResource */
        LayoutSectionDetailResource: {
            /** @default 1 */
            id: number;
            /** @default LayoutSection Title */
            title: string;
            /** @default LayoutSection Description */
            description: string;
            type?: components["schemas"]["LayoutSectionTypeEnum"];
            mode?: components["schemas"]["LayoutSectionModeEnum"];
            /** @default /product?filter[category]=3 */
            more_action: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            expired_at: string;
            /** @default 1 */
            order: number;
            published?: components["schemas"]["BooleanEnum"];
            logo?: components["schemas"]["MediaResource"];
            image?: components["schemas"]["MediaResource"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** LayoutSectionResource */
        LayoutSectionResource: {
            /** @default 1 */
            id: number;
            /** @default LayoutSection Title */
            title: string;
            /** @default LayoutSection Description */
            description: string;
            type?: components["schemas"]["LayoutSectionTypeEnum"];
            mode?: components["schemas"]["LayoutSectionModeEnum"];
            /** @default /product?filter[category]=3 */
            more_action: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            expired_at: string;
            /** @default 1 */
            order: number;
            published?: components["schemas"]["BooleanEnum"];
            logo?: components["schemas"]["MediaResource"];
            image?: components["schemas"]["MediaResource"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        MediaGalleryResource: {
            /**
             * @description media id
             * @default 1
             */
            id: number;
            /**
             * @description file name
             * @default example.jpg
             */
            file_name: string;
            /**
             * @description file url
             * @default http://localhost:8000/storage/example.jpg
             */
            original_url: string;
            /** @default {} */
            conversions: Record<string, never>;
            /**
             * @description is primary image
             * @default false
             */
            primary: boolean;
            /**
             * @description products related to this image
             * @default [1,2]
             */
            variants: number[];
        };
        /**
         * MediaResource
         * @description Media resource
         */
        MediaResource: {
            /**
             * @description media id
             * @default 1
             */
            id: number;
            /**
             * @description file name
             * @default example.jpg
             */
            file_name: string;
            /**
             * @description file mime type
             * @default image/png
             */
            mime_type: string;
            /**
             * @description file url
             * @default http://localhost:8000/storage/example.jpg
             */
            original_url: string;
            /** @default {} */
            conversions: Record<string, never>;
        };
        /** OrderDetailResource */
        OrderDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Order Title */
            title: string;
            /** @default Order Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        OrderItemDetailResource: {
            /** @default 1 */
            id: number;
        };
        OrderItemResource: {
            /** @default 1 */
            id: number;
            /** @default 1 */
            quantity: number;
            default_price?: components["schemas"]["LocalPriceEnum"];
            sale_price?: components["schemas"]["LocalPriceEnum"];
            product?: components["schemas"]["ProductResource"];
            unit?: components["schemas"]["UnitSimpleResource"];
        };
        OrderItemSimpleResource: {
            /** @default 1 */
            id: number;
        };
        /** OrderResource */
        OrderResource: {
            /** @default 1 */
            id: number;
            /** @default Order Title */
            title: string;
            /** @default Order Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** OrderStatusDetailResource */
        OrderStatusDetailResource: {
            /** @default 1 */
            id: number;
            /** @default OrderStatus Title */
            title: string;
            /** @default OrderStatus Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** OrderStatusResource */
        OrderStatusResource: {
            /** @default 1 */
            id: number;
            /** @default OrderStatus Title */
            title: string;
            /** @default OrderStatus Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** PaymentMethodDetailResource */
        PaymentMethodDetailResource: {
            /** @default 1 */
            id: number;
            /** @default PaymentMethod Title */
            title: string;
            /** @default PaymentMethod Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** PaymentMethodResource */
        PaymentMethodResource: {
            /** @default 1 */
            id: number;
            /** @default PaymentMethod Title */
            title: string;
            /** @default PaymentMethod Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * PricingPlanDetailResource
         * @description PricingPlanDetail resource
         */
        PricingPlanDetailResource: {
            /** @default 1 */
            id: number;
            /** @default PricingPlan Title */
            title: string;
            type?: components["schemas"]["UserGroupEnum"];
            application_percent?: {
                /** @default 1 */
                price: number;
                /** @default false */
                changed: boolean;
            };
            website_percent?: {
                /** @default 1 */
                price: number;
                /** @default false */
                changed: boolean;
            };
        };
        /**
         * PricingPlanResource
         * @description PricingPlan resource
         */
        PricingPlanResource: {
            /** @default 1 */
            id: number;
            /** @default PricingPlan Title */
            title: string;
            type?: components["schemas"]["UserGroupEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        ProductAttributeValueResource: {
            /** @default 1 */
            attribute_id: number;
            /** @default 1 */
            value: number;
            /** @default L */
            attribute: string;
        };
        ProductDetailClientResource: {
            /** @default 1 */
            id: number;
            /** @default Product Title */
            title: string;
            /**
             * @default false
             * @enum {boolean}
             */
            liked: false | true;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default sku */
            sku: string;
            /** @default 1 */
            cart_quantity: number;
            stock_status?: {
                /**
                 * @default false
                 * @enum {boolean}
                 */
                status: false | true;
                /** @default Out of stock */
                label: string;
                /** @default danger */
                color: string;
            };
            /** @default 1 */
            stock: number;
            price?: components["schemas"]["PriceResource"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            /**
             * @description minimum_sale
             * @default 1
             */
            minimum_sale: number;
            /**
             * @description maximum_sale
             * @default 100
             */
            maximum_sale: number;
            /** @default 100 */
            weight: number;
            /** @default 200 */
            height: number;
            /** @default 300 */
            length: number;
            attributes?: components["schemas"]["ProductAttributeValueResource"][] | null;
            pricing_plans?: components["schemas"]["PriceResource"][] | null;
            /** @default 1 */
            interface_id: number;
            unit?: components["schemas"]["UnitResource"];
            category?: components["schemas"]["CategoryDetailResource"];
            brand?: components["schemas"]["BrandResource"];
        };
        /**
         * ProductDetailResource
         * @description ProductDetail resource
         */
        ProductDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Product Title */
            title: string;
            /**
             * @default false
             * @enum {boolean}
             */
            liked: false | true;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default sku */
            sku: string;
            /** @default 1 */
            cart_quantity: number;
            stock_status?: {
                /**
                 * @default false
                 * @enum {boolean}
                 */
                status: false | true;
                /** @default Out of stock */
                label: string;
                /** @default danger */
                color: string;
            };
            /** @default 1 */
            stock: number;
            wholesale_price?: components["schemas"]["LocalPriceEnum"];
            retail_price?: components["schemas"]["LocalPriceEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            image?: components["schemas"]["MediaResource"] | null;
            images?: components["schemas"]["MediaResource"][] | null;
            /**
             * @description minimum_sale
             * @default 1
             */
            minimum_sale: number;
            /**
             * @description maximum_sale
             * @default 100
             */
            maximum_sale: number;
            /** @default 100 */
            weight: number;
            /** @default 200 */
            height: number;
            /** @default 300 */
            length: number;
            /** @default 400 */
            width: number;
            attributes?: components["schemas"]["ProductAttributeValueResource"][] | null;
            price_list?: components["schemas"]["PricingPlanDetailResource"][] | null;
        };
        ProductDetailUnitResource: {
            retail_units?: components["schemas"]["UnitResource"][] | null;
            wholesale_units?: components["schemas"]["UnitResource"][] | null;
        };
        /**
         * ProductInterfaceDetailResource
         * @description ProductInterfaceDetail resource
         */
        ProductInterfaceDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Product Title */
            title: string;
            /** @default Product Description */
            description: string;
            /** @default Product-Slug */
            slug: string;
            type?: components["schemas"]["ProductInterfaceTypeEnum"];
            category?: components["schemas"]["SimpleCategoryResource"];
            /** @default 0 */
            view_count: number;
            /** @default 0 */
            comment_count: number;
            /** @default 0 */
            like_count: number;
            /** @default 0 */
            wish_count: number;
            published?: components["schemas"]["BooleanEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            published_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            ladder_at: string;
            /** @default ProductInterface Body */
            body: string;
            /** @default 2 */
            warning_quantity: number;
            /** @default 20 */
            max_discount_percent: number;
            main_product?: components["schemas"]["ProductDetailResource"];
            retail_units?: components["schemas"]["UnitSimpleResource"][];
            wholesale_units?: components["schemas"]["UnitSimpleResource"][];
            brand?: components["schemas"]["BrandResource"] | null;
            tax?: components["schemas"]["TaxResource"] | null;
            attributes?: components["schemas"]["AttributeDetailResource"][];
            images?: components["schemas"]["MediaGalleryResource"][] | null;
            video?: components["schemas"]["MediaResource"] | null;
            products?: components["schemas"]["ProductDetailResource"][];
            tags?: components["schemas"]["TagResource"][];
            /** @default product-title */
            seo_title: string;
            /** @default product-description */
            seo_description: string;
            /** @default key1,key2 */
            seo_keywords: string;
            categories?: components["schemas"]["SimpleCategoryResource"][];
        };
        /**
         * ProductInterfaceResource
         * @description ProductInterface resource
         */
        ProductInterfaceResource: {
            /** @default 1 */
            id: number;
            /** @default Product Title */
            title: string;
            /** @default Product Description */
            description: string;
            /** @default Product-Slug */
            slug: string;
            type?: components["schemas"]["ProductInterfaceTypeEnum"];
            image?: components["schemas"]["MediaResource"];
            category?: components["schemas"]["SimpleCategoryResource"];
            /** @default 0 */
            view_count: number;
            /** @default 0 */
            comment_count: number;
            /** @default 0 */
            like_count: number;
            /** @default 0 */
            wish_count: number;
            published?: components["schemas"]["BooleanEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * ProductResource
         * @description Product resource
         */
        ProductResource: {
            /** @default 1 */
            id: number;
            /** @default Product Title */
            title: string;
            /**
             * @default false
             * @enum {boolean}
             */
            liked: false | true;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default sku */
            sku: string;
            /** @default 1 */
            cart_quantity: number;
            stock_status?: {
                /**
                 * @default false
                 * @enum {boolean}
                 */
                status: false | true;
                /** @default Out of stock */
                label: string;
                /** @default danger */
                color: string;
            };
            /** @default 1 */
            stock: number;
            price?: components["schemas"]["PriceResource"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            image?: components["schemas"]["MediaResource"] | null;
            /**
             * @description minimum_sale
             * @default 1
             */
            minimum_sale: number;
            /**
             * @description maximum_sale
             * @default 100
             */
            maximum_sale: number;
        };
        ProductSimpleResourceResource: {
            /** @default 1 */
            id: number;
            /** @default sku */
            sku: string;
            price?: components["schemas"]["PriceResource"];
            /** @default 1.0 */
            weight: number;
            /** @default 1.0 */
            height: number;
            /** @default 1.0 */
            length: number;
            attributes?: components["schemas"]["ProductAttributeValueResource"][] | null;
            stock_status?: {
                /**
                 * @default false
                 * @enum {boolean}
                 */
                status: false | true;
                /** @default Out of stock */
                label: string;
                /** @default danger */
                color: string;
            };
            /** @default 1 */
            cart_quantity: number;
            cart_unit?: components["schemas"]["UnitResource"];
        };
        /**
         * ProfileResource
         * @description Profile resource
         */
        ProfileResource: {
            /**
             * @description Profile id
             * @default 1
             */
            id: number;
        };
        /** ProfitDetailResource */
        ProfitDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Profit Title */
            title: string;
            /** @default Profit Description */
            description: string;
            /** @default 1 */
            month: number;
            /** @default 5 */
            value: number;
            published?: components["schemas"]["BooleanEnum"] | null;
            min_price?: components["schemas"]["LocalPriceEnum"];
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            user_groups?: components["schemas"]["UserGroupResource"][] | null;
        };
        /** ProfitResource */
        ProfitResource: {
            /** @default 1 */
            id: number;
            /** @default Profit Title */
            title: string;
            /** @default Profit Description */
            description: string;
            /** @default 1 */
            month: number;
            /** @default 5 */
            value: number;
            /**
             * @description 0: Not Selectable, 1: Selectable used in cart
             * @default 1
             * @enum {boolean}
             */
            selectable: 0 | 1;
            published?: components["schemas"]["BooleanEnum"] | null;
            min_price?: components["schemas"]["LocalPriceEnum"];
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** ProvinceDetailResource */
        ProvinceDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Province Title */
            title: string;
            /** @default Province Description */
            description: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** ProvinceResource */
        ProvinceResource: {
            /** @default 1 */
            id: number;
            country?: components["schemas"]["CountryResource"];
            /** @default  */
            name: string;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * SettingResource
         * @description Setting resource
         */
        SettingResource: {
            /** @default 1 */
            id: number;
            /** @default product */
            key: string;
            /** @default Product Settings */
            label: string;
            /** @default Update the product settings in this section. */
            help: string;
            /** @default product */
            value: string;
        };
        /** ShippingMethodDetailResource */
        ShippingMethodDetailResource: {
            /** @default 1 */
            id: number;
            /** @default ShippingMethod Title */
            title: string;
            /** @default ShippingMethod Description */
            description: string;
            published?: components["schemas"]["BooleanEnum"];
            driver?: components["schemas"]["ShippingMethodDriverEnum"];
            /** @default 1 */
            order: number;
            rules?: {
                country?: {
                    /** @default Country Name */
                    label: string;
                    /** @default 1 */
                    value: number;
                };
                province?: {
                    /** @default Province Name */
                    label: string;
                    /** @default 1 */
                    value: number;
                };
                city?: {
                    /** @default City Name */
                    label: string;
                    /** @default 1 */
                    value: number;
                };
            };
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** ShippingMethodResource */
        ShippingMethodResource: {
            /** @default 1 */
            id: number;
            /** @default ShippingMethod Title */
            title: string;
            /** @default ShippingMethod Description */
            description: string;
            published?: components["schemas"]["BooleanEnum"];
            driver?: components["schemas"]["ShippingMethodDriverEnum"];
            /** @default 1 */
            order: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        SimpleCategoryResource: {
            /** @default 1 */
            id: number;
            /** @default Category Title */
            title: string;
            /** @default Category-Slug */
            slug: string;
            /** @default 1 */
            attribute_group_id: number;
        };
        /** SliderDetailResource */
        SliderDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Slider Title */
            title: string;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            published?: components["schemas"]["BooleanEnum"] | null;
            items?: components["schemas"]["SliderItemResource"][];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** SliderItemDetailResource */
        SliderItemDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Slider Title */
            title: string;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            published?: components["schemas"]["BooleanEnum"];
            /** @default 2024-08-19T07:26:07.000000Z */
            published_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            expired_at: string;
            product?: components["schemas"]["ProductResource"];
            category?: components["schemas"]["CategoryResource"];
            brand?: components["schemas"]["BrandResource"];
            /** @default https://example.com */
            link: string;
            /** @default https://example.com */
            url: string;
            timer?: {
                /** @default 2024-08-19T07:26:07.000000Z */
                start: string;
                /** @default 2024-08-19T07:26:07.000000Z */
                end: string;
            };
            type?: components["schemas"]["SliderItemTypeEnum"];
            /** @default 1 */
            ordering: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            media?: components["schemas"]["MediaResource"];
            slider?: components["schemas"]["SliderResource"];
            user_groups?: components["schemas"]["UserGroupResource"][] | null;
            /** @default false */
            has_timer: boolean;
            /** @default 2024-08-19T07:26:07.000000Z */
            timer_start: string;
        };
        /** SliderItemResource */
        SliderItemResource: {
            /** @default 1 */
            id: number;
            /** @default Slider Title */
            title: string;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            published_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            expired_at: string;
            product?: components["schemas"]["ProductResource"];
            category?: components["schemas"]["CategoryResource"];
            brand?: components["schemas"]["BrandResource"];
            /** @default https://example.com */
            link: string;
            /** @default https://example.com */
            url: string;
            timer?: {
                /** @default 2024-08-19T07:26:07.000000Z */
                start: string;
                /** @default 2024-08-19T07:26:07.000000Z */
                end: string;
            };
            type?: components["schemas"]["SliderItemTypeEnum"] | null;
            /** @default 1 */
            ordering: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            media?: components["schemas"]["MediaResource"];
        };
        /** SliderResource */
        SliderResource: {
            /** @default 1 */
            id: number;
            /** @default Slider Title */
            title: string;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** StarResource */
        StarResource: {
            /** @default 1 */
            id: number;
            /** @default 5 */
            star: number;
            user?: components["schemas"]["UserResource"];
            /** @default product-interface */
            morphable_type: string;
            morphable?: components["schemas"]["ProductInterfaceResource"];
            /** Format: date-time */
            updated_at?: string;
            /** Format: date-time */
            created_at?: string;
        };
        /** StoryDetailResource */
        StoryDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Story Title */
            title: string;
            /** @default 0 */
            view_count: number;
            /** @default 0 */
            like_count: number;
            product?: components["schemas"]["ProductResource"] | null;
            category?: components["schemas"]["CategoryResource"] | null;
            brand?: components["schemas"]["BrandResource"] | null;
            /** @default https://example.com */
            link: string;
            /** @default https://example.com */
            url: string;
            timer?: {
                /** @default 2024-08-19T07:26:07.000000Z */
                start: string;
                /** @default 2024-08-19T07:26:07.000000Z */
                end: string;
            };
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            published_at: string;
            type?: components["schemas"]["StoryTypeEnum"] | null;
            /** @default 1 */
            order: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            expired_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            media?: components["schemas"]["MediaResource"];
            categories?: components["schemas"]["CategoryResource"][] | null;
            user_groups?: components["schemas"]["UserGroupResource"][] | null;
            tags?: components["schemas"]["TagResource"][] | null;
            /** @default false */
            has_timer: boolean;
            /** @default 2024-08-19T07:26:07.000000Z */
            timer_start: string;
            /** @default false */
            read_by_user: boolean;
        };
        /** StoryResource */
        StoryResource: {
            /** @default 1 */
            id: number;
            /** @default Story Title */
            title: string;
            /** @default 0 */
            view_count: number;
            /** @default 0 */
            like_count: number;
            product?: components["schemas"]["ProductResource"] | null;
            category?: components["schemas"]["CategoryResource"] | null;
            brand?: components["schemas"]["BrandResource"] | null;
            /** @default https://example.com */
            link: string;
            /** @default https://example.com */
            url: string;
            timer?: {
                /** @default 2024-08-19T07:26:07.000000Z */
                start: string;
                /** @default 2024-08-19T07:26:07.000000Z */
                end: string;
            };
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            published_at: string;
            type?: components["schemas"]["StoryTypeEnum"] | null;
            /** @default 1 */
            order: number;
            /** @default 2024-08-19T07:26:07.000000Z */
            expired_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            media?: components["schemas"]["MediaResource"];
            /** @default false */
            read_by_user: boolean;
        };
        /** TagDetailResource */
        TagDetailResource: {
            /** @default 1 */
            id: number;
            /** @default tag name */
            name: string;
            /** @default tag-slug */
            slug: string;
            /** @default tag-type */
            type: string;
            /** @default 1 */
            order_column: number;
            /**
             * Format: date-time
             * @default 2021-09-01 00:00:00
             */
            updated_at: string;
            /**
             * Format: date-time
             * @default 2021-09-01 00:00:00
             */
            created_at: string;
            image?: components["schemas"]["MediaResource"];
        };
        /**
         * TagResource
         * @description tag resource
         */
        TagResource: {
            /** @default 1 */
            id: number;
            /** @default tag name */
            name: string;
            /** @default tag-slug */
            slug: string;
            type?: components["schemas"]["TagTypeEnum"] | null;
            /** @default 1 */
            order_column: number;
            /**
             * Format: date-time
             * @default 2021-09-01 00:00:00
             */
            updated_at: string;
            /**
             * Format: date-time
             * @default 2021-09-01 00:00:00
             */
            created_at: string;
            image?: components["schemas"]["MediaResource"];
        };
        /**
         * TaxDetailResource
         * @description TaxDetail resource
         */
        TaxDetailResource: {
            /** @default 1 */
            id: number;
            /** @default VAT updated */
            title: string;
            /**
             * Format: float
             * @default 1.4
             */
            rate: number;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default true */
            deletable: boolean;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * TaxResource
         * @description Tax resource
         */
        TaxResource: {
            /** @default 1 */
            id: number;
            /** @default VAT */
            title: string;
            /** @default 2 */
            rate: number;
            published?: components["schemas"]["BooleanEnum"] | null;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default true */
            deletable: boolean;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * TicketDetailResource
         * @description TicketDetail resource
         */
        TicketDetailResource: {
            /**
             * @description User id
             * @default 1
             */
            id: number;
        };
        /**
         * TicketMessageDetailResource
         * @description TicketMessageDetail resource
         */
        TicketMessageDetailResource: {
            /**
             * @description User id
             * @default 1
             */
            id: number;
        };
        /**
         * TicketMessageResource
         * @description TicketMessage resource
         */
        TicketMessageResource: {
            /**
             * @description User id
             * @default 1
             */
            id: number;
        };
        /**
         * TicketResource
         * @description Ticket resource
         */
        TicketResource: {
            /**
             * @description User id
             * @default 1
             */
            id: number;
        };
        /**
         * TranslationResource
         * @description Translation resource
         */
        TranslationResource: {
            /**
             * @description Translation id
             * @default 1
             */
            id: number;
        };
        /**
         * UnitDetailResource
         * @description UnitDetail resource
         */
        UnitDetailResource: {
            /** @default 1 */
            id: number;
            /** @default Unit Title */
            title: string;
            type?: components["schemas"]["UnitTypeEnum"] | null;
            /** @default 1 */
            value: number;
            published?: components["schemas"]["BooleanEnum"] | null;
            default?: components["schemas"]["YesNoEnum"] | null;
            /** @default true */
            deletable: boolean;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * UnitResource
         * @description Unit resource
         */
        UnitResource: {
            /** @default 1 */
            id: number;
            /** @default Unit Title */
            title: string;
            type?: components["schemas"]["UnitTypeEnum"] | null;
            /** @default 1 */
            value: number;
            published?: components["schemas"]["BooleanEnum"] | null;
            default?: components["schemas"]["YesNoEnum"] | null;
            /** @default true */
            deletable: boolean;
            /** @default [
             *       "fa",
             *       "en"
             *     ] */
            languages: string[];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        UnitSimpleResource: {
            /** @default 1 */
            id: number;
            /** @default Unit Title */
            title: string;
            /** @default 1 */
            value: number;
        };
        /**
         * UserDetailResource
         * @description User resource
         */
        UserDetailResource: {
            /**
             * @description User id
             * @default 1
             */
            id: number;
            /**
             * @description User name
             * @default John
             */
            name: string;
            /**
             * @description User family
             * @default Doe
             */
            family: string;
            /**
             * @description User email
             * @default admin@gmail.com
             */
            email: string;
            /**
             * @description User mobile
             * @default 09123456789
             */
            mobile: string;
        };
        /** UserGroupDetailResource */
        UserGroupDetailResource: {
            /** @default 1 */
            id: number;
            /** @default UserGroup Title */
            title: string;
            /** @default UserGroup Description */
            description: string;
            min_price?: components["schemas"]["LocalPriceEnum"];
            /** @default 100 */
            order_count: number;
            /** @default true */
            deletable: boolean;
            type?: components["schemas"]["UserGroupEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
            pricing_plan?: components["schemas"]["PricingPlanResource"];
            profits?: components["schemas"]["ProfitResource"][];
            exceptions?: {
                /**
                 * @default brand
                 * @enum {string}
                 */
                type: "brand" | "category" | "tag";
                /** @default 1 */
                value: number;
                /** @default 20 */
                application_percent: number;
                /** @default 20 */
                website_percent: number;
                morph?: components["schemas"]["BrandResource"] & components["schemas"]["CategoryResource"] & components["schemas"]["TagResource"];
            }[];
        };
        /** UserGroupResource */
        UserGroupResource: {
            /** @default 1 */
            id: number;
            /** @default UserGroup Title */
            title: string;
            /** @default UserGroup Description */
            description: string;
            min_price?: components["schemas"]["LocalPriceEnum"];
            /** @default 100 */
            order_count: number;
            /** @default true */
            deletable: boolean;
            type?: components["schemas"]["UserGroupEnum"] | null;
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** UserRequestBulkPurchaseResource */
        UserRequestBulkPurchaseResource: {
            /** @default 1 */
            id: number;
            /** @default UserRequest Title */
            title: string;
            /** @default UserRequest Description */
            body: string;
            type?: components["schemas"]["UserRequestTypeEnum"];
            status?: components["schemas"]["UserRequestStatusEnum"];
            user?: components["schemas"]["UserResource"];
            /** @description required if type is bulk_purchase */
            products?: components["schemas"]["UserRequestProductResource"][];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /** UserRequestDetailResource */
        UserRequestDetailResource: {
            /** @default 1 */
            id: number;
            /** @default UserRequest Title */
            title: string;
            /** @default UserRequest Description */
            body: string;
            type?: components["schemas"]["UserRequestTypeEnum"];
            status?: components["schemas"]["UserRequestStatusEnum"];
            /** @default User */
            morphable_type: string;
            morphable?: components["schemas"]["UserResource"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        UserRequestProductResource: {
            /** @default 1 */
            id: number;
            /** @default sku */
            sku: string;
            /** @default Product Title */
            title: string;
            image?: components["schemas"]["MediaResource"];
            price?: components["schemas"]["PriceResource"];
            status?: components["schemas"]["UserRequestStatusEnum"];
        };
        /** UserRequestResource */
        UserRequestResource: {
            /** @default 1 */
            id: number;
            /** @default UserRequest Title */
            title: string;
            /** @default UserRequest Description */
            body: string;
            type?: components["schemas"]["UserRequestTypeEnum"];
            status?: components["schemas"]["UserRequestStatusEnum"];
            /** @default User */
            morphable_type: string;
            morphable?: components["schemas"]["UserResource"];
            /** @default 2024-08-19T07:26:07.000000Z */
            updated_at: string;
            /** @default 2024-08-19T07:26:07.000000Z */
            created_at: string;
        };
        /**
         * UserResource
         * @description User resource
         */
        UserResource: {
            /** @default 1 */
            id: number;
            /** @default John */
            name: string;
            /** @default Doe */
            family: string;
            /** @default admin@gmail.com */
            email: string;
            /** @default 09123456789 */
            mobile: string;
            avatar?: components["schemas"]["MediaResource"];
        };
    };
    responses: {
        /** @description Bad Request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @default Bad Request. */
                    error: string;
                };
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @default Unauthenticated. */
                    error: string;
                };
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @default Forbidden. */
                    error: string;
                };
            };
        };
        /** @description Internal Server Error */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @default Internal Server Error. */
                    error: string;
                };
            };
        };
    };
    parameters: {
        /** @description Search in events */
        advanced_search: {
            /** @default id */
            column?: string;
            /**
             * @default =
             * @enum {string}
             */
            operator?: "like" | "=" | ">" | "<" | ">=" | "<=";
            /** @default 1 */
            from?: string;
            /** @default  */
            to?: string | null;
            /**
             * @default 1
             * @enum {integer}
             */
            contain?: 0 | 1;
        }[];
        /** @description Filter shifts */
        filter: {
            /** @default  */
            search?: string;
        };
        search: string;
        name: string;
        /** @description Sort criteria for shifts (e.g., name, -created_at) */
        sort: string[];
        /** @description page number */
        page: number;
        /** @description number of items per page */
        page_limit: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAddresss: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["AddressResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreAddressRequest"];
                "application/json": components["schemas"]["StoreAddressRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default address has been stored successfully */
                        message: string;
                        data?: components["schemas"]["AddressResource"];
                    };
                };
            };
        };
    };
    getAddressByUUID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address id */
                address: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default no message */
                        message: string;
                        data?: components["schemas"]["AddressResource"];
                    };
                };
            };
        };
    };
    updateAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address id */
                address: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateAddressRequest"];
                "application/json": components["schemas"]["UpdateAddressRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default address has been updated successfully */
                        message: string;
                        data?: components["schemas"]["AddressResource"];
                    };
                };
            };
        };
    };
    deleteAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address id */
                address: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default address has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    DefaultAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Address id */
                address: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default address has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["AddressResource"];
                    };
                };
            };
        };
    };
    getAttributes: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AttributeResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/attribute?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/attribute?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/attribute?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeAttribute: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreAttributeRequest"];
                "application/json": components["schemas"]["StoreAttributeRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["AttributeResource"];
                    };
                };
            };
        };
    };
    getAttributeByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Attribute id */
                attribute: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["AttributeDetailResource"];
                    };
                };
            };
        };
    };
    updateAttribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Attribute id */
                attribute: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateAttributeRequest"];
                "application/json": components["schemas"]["UpdateAttributeRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["AttributeResource"];
                    };
                };
            };
        };
    };
    deleteAttribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Attribute id */
                attribute: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default attribute has been deleted successfully */
                        message: string;
                        /** @default true */
                        data: boolean;
                    };
                };
            };
        };
    };
    "49a87d00f63b2ebbbaf608043e81c345": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            types?: {
                                /** @default Text */
                                label: string;
                                /** @default text */
                                value: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    getAttributeGroups: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["AttributeGroupResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/attributeGroup?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/attributeGroup?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/attributeGroup?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeAttributeGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreAttributeGroupRequest"];
                "application/json": components["schemas"]["StoreAttributeGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default attribute group has been stored successfully */
                        message: string;
                        data?: components["schemas"]["AttributeGroupResource"];
                    };
                };
            };
        };
    };
    getAttributeGroupByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description attributeGroup id */
                attributeGroup: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["AttributeGroupDetailResource"];
                    };
                };
            };
        };
    };
    updateAttributeGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attributeGroup: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateAttributeGroupRequest"];
                "application/json": components["schemas"]["UpdateAttributeGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default attribute group has been updated successfully */
                        message: string;
                        data?: components["schemas"]["AttributeGroupResource"];
                    };
                };
            };
        };
    };
    deleteAttributeGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                attributeGroup: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default attribute group has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getAttributeValues: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path: {
                /** @description attribute id */
                attribute: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["AttributeValueResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeAttributeValue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description attribute id */
                attribute: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreAttributeValueRequest"];
                "application/json": components["schemas"]["StoreAttributeValueRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default attribute value has been stored successfully */
                        message: string;
                        data?: components["schemas"]["AttributeValueResource"];
                    };
                };
            };
        };
    };
    getAttributeValueByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description attribute id */
                attribute: number;
                /** @description AttributeValue id */
                attributeValue: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["AttributeValueDetailResource"];
                    };
                };
            };
        };
    };
    updateAttributeValue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description attribute id */
                attribute: number;
                /** @description AttributeValue id */
                attributeValue: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateAttributeValueRequest"];
                "application/json": components["schemas"]["UpdateAttributeValueRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default attribute value has been updated successfully */
                        message: string;
                        data?: components["schemas"]["AttributeValueResource"];
                    };
                };
            };
        };
    };
    deleteAttributeValue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description attribute id */
                attribute: number;
                /** @description AttributeValue id */
                attributeValue: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default attribute value has been deleted successfully */
                        message: string;
                        /** @default true */
                        data: boolean;
                    };
                };
            };
        };
    };
    check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /**
                             * @description if user is registered means user has validated
                             * @default false
                             */
                            registered: boolean;
                            /**
                             * @description if user is validated means user validated email or mobile
                             * @default false
                             */
                            validated: boolean;
                            /**
                             * @description if user has password
                             * @default false
                             */
                            hasPassword: boolean;
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /**
                             * @description if user is registered means user has validated
                             * @default true
                             */
                            registered: boolean;
                            /**
                             * @description if user is validated means user validated email or mobile
                             * @default false
                             */
                            validated: boolean;
                            /**
                             * @description if user has password
                             * @default false
                             */
                            hasPassword: boolean;
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    confirm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /**
                             * @description if user is registered means user has validated
                             * @default true
                             */
                            registered: boolean;
                            /**
                             * @description if user is validated means user validated email or mobile
                             * @default true
                             */
                            validated: boolean;
                            /**
                             * @description if user has password
                             * @default false
                             */
                            hasPassword: boolean;
                            /** @default example token */
                            token: string;
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    resendCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResendCodeRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        /** @default true */
                        data: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    setPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetPasswordRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /**
                             * @description if user is registered means user has validated
                             * @default true
                             */
                            registered: boolean;
                            /**
                             * @description if user is validated means user validated email or mobile
                             * @default true
                             */
                            validated: boolean;
                            /**
                             * @description if user has password
                             * @default true
                             */
                            hasPassword: boolean;
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /** @default example token */
                            token: string;
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    loginForAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["LoginForAdminRequest"];
                "application/json": components["schemas"]["LoginForAdminRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /** @default example token */
                            token: string;
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    forgetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgetPasswordRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        /** @default true */
                        data: boolean;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            user?: components["schemas"]["UserResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    "88c1f759dcb17c1ebc6505483b6ddee9": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleCallbackRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user authenticated successfully */
                        message: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getBanks: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["BankResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/bank?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/bank?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/bank?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeBank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreBankRequest"];
                "application/json": components["schemas"]["StoreBankRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default bank has been stored successfully */
                        message: string;
                        data?: components["schemas"]["BankResource"];
                    };
                };
            };
        };
    };
    getBankByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bank: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["BankDetailResource"];
                    };
                };
            };
        };
    };
    updateBank: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bank: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateBankRequest"];
                "application/json": components["schemas"]["UpdateBankRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default bank has been updated successfully */
                        message: string;
                        data?: components["schemas"]["BankResource"];
                    };
                };
            };
        };
    };
    deleteBank: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bank: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default bank has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getBanners: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["BannerResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/banner?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/banner?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/banner?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeBanner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreBannerRequest"];
                "application/json": components["schemas"]["StoreBannerRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default banner has been stored successfully */
                        message: string;
                        data?: components["schemas"]["BannerResource"];
                    };
                };
            };
        };
    };
    getBannerByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                banner: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["BannerDetailResource"];
                    };
                };
            };
        };
    };
    updateBanner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                banner: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateBannerRequest"];
                "application/json": components["schemas"]["UpdateBannerRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default banner has been updated successfully */
                        message: string;
                        data?: components["schemas"]["BannerResource"];
                    };
                };
            };
        };
    };
    deleteBanner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                banner: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default banner has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleBanner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                banner: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default banner has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["BannerResource"];
                    };
                };
            };
        };
    };
    getBannerData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            btn_types?: string[];
                            btn_styles?: string[];
                            sizes?: {
                                /** @default 1x1 */
                                label: string;
                                /** @default 1x1 */
                                value: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    getBrands: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["BrandResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/brand?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/brand?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/brand?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeBrand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreBrandRequest"];
                "application/json": components["schemas"]["StoreBrandRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default brand has been stored successfully */
                        message: string;
                        data?: components["schemas"]["BrandResource"];
                    };
                };
            };
        };
    };
    getBrandByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Brand id */
                brand: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["BrandDetailResource"];
                    };
                };
            };
        };
    };
    updateBrand: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Brand id */
                brand: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateBrandRequest"];
                "application/json": components["schemas"]["UpdateBrandRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default brand has been updated successfully */
                        message: string;
                        data?: components["schemas"]["BrandResource"];
                    };
                };
            };
        };
    };
    deleteBrand: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Brand id */
                brand: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default brand has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleBrand: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Brand id */
                brand: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default brand has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["BrandResource"];
                    };
                };
            };
        };
    };
    getCarts: {
        parameters: {
            query?: {
                profit_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["OrderItemResource"][];
                        /** @default No message */
                        message: string;
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                        profits?: components["schemas"]["ProfitResource"][];
                        info?: {
                            /** @default 0 */
                            products_count: number;
                            /** @default 0 */
                            weight: number;
                        };
                        totals?: {
                            /** @default 0 */
                            sub_total_without_discount: number;
                            /** @default 0 */
                            sub_total_with_discount: number;
                            /** @default 0 */
                            diff_discount_price_and_sub_total: number;
                        };
                    };
                };
            };
        };
    };
    storeCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreCartRequest"];
                "application/json": components["schemas"]["StoreCartRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default cart has been stored successfully */
                        message: string;
                        data?: components["schemas"]["OrderItemResource"];
                    };
                };
            };
        };
    };
    deleteCart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                cart: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default cart has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getCategories: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Category type */
                "filter[type]"?: "blog" | "product" | "notice" | "highlight" | "portfolio" | "faq" | "report";
                "filter[parent_id]"?: number | null;
                "filter[published]"?: 1 | 0;
                "filter[except]"?: Record<string, never>;
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CategoryResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/category?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/category?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/category?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at",
                             *       "most_visited"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreCategoryRequest"];
                "application/json": components["schemas"]["StoreCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default category has been stored successfully */
                        message: string;
                        data?: components["schemas"]["CategoryResource"];
                    };
                };
            };
        };
    };
    getHighlights: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CategoryClientResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/category?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/category?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/category?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                    };
                };
            };
        };
    };
    getCategoryByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category id */
                category: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["CategoryDetailResource"];
                    };
                };
            };
        };
    };
    updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category id */
                category: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateCategoryRequest"];
                "application/json": components["schemas"]["UpdateCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default category has been updated successfully */
                        message: string;
                        data?: components["schemas"]["CategoryResource"];
                    };
                };
            };
        };
    };
    deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category id */
                category: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default category has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category id */
                category: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default category has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["CategoryResource"];
                    };
                };
            };
        };
    };
    getCategoryData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            types?: {
                                /** @default Product */
                                label: string;
                                /** @default product */
                                value: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    getCitys: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CityResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/city?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/city?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/city?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeCity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreCityRequest"];
                "application/json": components["schemas"]["StoreCityRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default city has been stored successfully */
                        message: string;
                        data?: components["schemas"]["CityResource"];
                    };
                };
            };
        };
    };
    getCityByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                city: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["CityDetailResource"];
                    };
                };
            };
        };
    };
    updateCity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                city: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateCityRequest"];
                "application/json": components["schemas"]["UpdateCityRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default city has been updated successfully */
                        message: string;
                        data?: components["schemas"]["CityResource"];
                    };
                };
            };
        };
    };
    deleteCity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                city: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default city has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getComments: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    storeComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreCommentRequest"];
                "application/json": components["schemas"]["StoreCommentRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getCommentsByModel: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
            };
            header?: never;
            path: {
                model: "product-interface";
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getCommentsByUser: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
            };
            header?: never;
            path: {
                user: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getCommentByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Comment id */
                comment: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    updateComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Comment id */
                comment: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateCommentRequest"];
                "application/json": components["schemas"]["UpdateCommentRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Comment id */
                comment: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    replyByAdmin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Comment id */
                comment: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ReplyByAdminToCommentRequest"];
                "application/json": components["schemas"]["ReplyByAdminToCommentRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CommentResource"];
                    };
                };
            };
        };
    };
    toggleComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                comment: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            user?: components["schemas"]["CommentResource"];
                        };
                    };
                };
            };
        };
    };
    getCountrys: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CountryResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    storeCountry: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreCountryRequest"];
                "application/json": components["schemas"]["StoreCountryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CountryResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getCountryByUUID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Country uuid */
                country: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CountryResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    updateCountry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Country uuid */
                country: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateCountryRequest"];
                "application/json": components["schemas"]["UpdateCountryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["CountryResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    deleteCountry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Country uuid */
                country: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getCurrencys: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CurrencyResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/currency?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/currency?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/currency?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreCurrencyRequest"];
                "application/json": components["schemas"]["StoreCurrencyRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default currency has been stored successfully */
                        message: string;
                        data?: components["schemas"]["CurrencyResource"];
                    };
                };
            };
        };
    };
    getCurrencyByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["CurrencyDetailResource"];
                    };
                };
            };
        };
    };
    updateCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateCurrencyRequest"];
                "application/json": components["schemas"]["UpdateCurrencyRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default currency has been updated successfully */
                        message: string;
                        data?: components["schemas"]["CurrencyResource"];
                    };
                };
            };
        };
    };
    deleteCurrency: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currency: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default currency has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getDiscounts: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["DiscountResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/discount?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/discount?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/discount?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeDiscount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreDiscountRequest"];
                "application/json": components["schemas"]["StoreDiscountRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default discount has been stored successfully */
                        message: string;
                        data?: components["schemas"]["DiscountResource"];
                    };
                };
            };
        };
    };
    getDiscountByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discount: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["DiscountDetailResource"];
                    };
                };
            };
        };
    };
    updateDiscount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discount: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateDiscountRequest"];
                "application/json": components["schemas"]["UpdateDiscountRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default discount has been updated successfully */
                        message: string;
                        data?: components["schemas"]["DiscountResource"];
                    };
                };
            };
        };
    };
    deleteDiscount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discount: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default discount has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getHistoryByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                history: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["HistoryResource"];
                    };
                };
            };
        };
    };
    "9608ca180efeead34cf67e0ed42352f3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description export */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["HistoryExportRequest"];
                "application/json": components["schemas"]["HistoryExportRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    getHomeWeb: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutSectionResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    getHomeApp: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutSectionResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    getLayouts: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeLayout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreLayoutRequest"];
                "application/json": components["schemas"]["StoreLayoutRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutResource"];
                    };
                };
            };
        };
    };
    getLayoutByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layout: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutDetailResource"];
                    };
                };
            };
        };
    };
    updateLayout: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layout: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateLayoutRequest"];
                "application/json": components["schemas"]["UpdateLayoutRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutResource"];
                    };
                };
            };
        };
    };
    deleteLayout: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layout: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    getLayoutSections: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path: {
                layout: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutSectionResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeLayoutSection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreLayoutSectionRequest"];
                "application/json": components["schemas"]["StoreLayoutSectionRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutSectionResource"];
                    };
                };
            };
        };
    };
    getLayoutSectionByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layout: number;
                section: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutSectionResource"];
                    };
                };
            };
        };
    };
    updateLayoutSection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layout: number;
                layoutSection: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateLayoutSectionRequest"];
                "application/json": components["schemas"]["UpdateLayoutSectionRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutSectionResource"];
                    };
                };
            };
        };
    };
    deleteLayoutSection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layoutSection: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    toggleLayoutSection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                layoutSection: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            user?: components["schemas"]["LayoutSectionResource"];
                        };
                    };
                };
            };
        };
    };
    getLayoutSectionData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            types?: {
                                /** @default label */
                                label: string;
                                /** @default value */
                                value: string;
                            }[];
                            modes?: {
                                /** @default label */
                                label: string;
                                /** @default value */
                                value: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    getOrders: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["OrderResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/order?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/order?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/order?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreOrderRequest"];
                "application/json": components["schemas"]["StoreOrderRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default order has been stored successfully */
                        message: string;
                        data?: components["schemas"]["OrderResource"];
                    };
                };
            };
        };
    };
    getOrderByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["OrderDetailResource"];
                    };
                };
            };
        };
    };
    updateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateOrderRequest"];
                "application/json": components["schemas"]["UpdateOrderRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default order has been updated successfully */
                        message: string;
                        data?: components["schemas"]["OrderResource"];
                    };
                };
            };
        };
    };
    deleteOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default order has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getOrderStatuss: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["OrderStatusResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/order-status?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/order-status?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/order-status?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeOrderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreOrderStatusRequest"];
                "application/json": components["schemas"]["StoreOrderStatusRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default order-status has been stored successfully */
                        message: string;
                        data?: components["schemas"]["OrderStatusResource"];
                    };
                };
            };
        };
    };
    getOrderStatusByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderStatus: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["OrderStatusDetailResource"];
                    };
                };
            };
        };
    };
    updateOrderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderStatus: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateOrderStatusRequest"];
                "application/json": components["schemas"]["UpdateOrderStatusRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default order-status has been updated successfully */
                        message: string;
                        data?: components["schemas"]["OrderStatusResource"];
                    };
                };
            };
        };
    };
    deleteOrderStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderStatus: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default order-status has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getPaymentMethods: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PaymentMethodResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/payment-method?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/payment-method?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/payment-method?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storePaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StorePaymentMethodRequest"];
                "application/json": components["schemas"]["StorePaymentMethodRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default payment-method has been stored successfully */
                        message: string;
                        data?: components["schemas"]["PaymentMethodResource"];
                    };
                };
            };
        };
    };
    getPaymentMethodByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paymentMethod: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["PaymentMethodDetailResource"];
                    };
                };
            };
        };
    };
    updatePaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paymentMethod: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdatePaymentMethodRequest"];
                "application/json": components["schemas"]["UpdatePaymentMethodRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default payment-method has been updated successfully */
                        message: string;
                        data?: components["schemas"]["PaymentMethodResource"];
                    };
                };
            };
        };
    };
    deletePaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paymentMethod: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default payment-method has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getPricingPlans: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["PricingPlanResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storePricingPlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StorePricingPlanRequest"];
                "application/json": components["schemas"]["StorePricingPlanRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["PricingPlanResource"];
                    };
                };
            };
        };
    };
    getPricingPlanByUUID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description PricingPlan id */
                pricingPlan: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["PricingPlanDetailResource"];
                    };
                };
            };
        };
    };
    updatePricingPlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricingPlan: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdatePricingPlanRequest"];
                "application/json": components["schemas"]["UpdatePricingPlanRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["PricingPlanResource"];
                    };
                };
            };
        };
    };
    deletePricingPlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricingPlan: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    getProducts: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreProductRequest"];
                "application/json": components["schemas"]["StoreProductRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductResource"];
                    };
                };
            };
        };
    };
    relatedProducts: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path: {
                product: number;
                type: "tag" | "category" | "festival";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    getProductByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product id */
                product: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductDetailResource"];
                    };
                };
            };
        };
    };
    updateProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product id */
                product: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateProductRequest"];
                "application/json": components["schemas"]["UpdateProductRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductResource"];
                    };
                };
            };
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product id */
                product: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    getProductByIDForClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product id */
                product: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductDetailClientResource"];
                    };
                };
            };
        };
    };
    toggleProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            user?: components["schemas"]["ProductResource"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getProductData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default no message */
                        message: string;
                        /** @default [] */
                        data: Record<string, never>;
                    };
                };
            };
        };
    };
    getProductInterfaces: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductInterfaceResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeProductInterface: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreProductInterfaceRequest"];
                "application/json": components["schemas"]["StoreProductInterfaceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductInterfaceResource"];
                    };
                };
            };
        };
    };
    getProductInterfaceByUUID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ProductInterface id */
                productInterface: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductInterfaceDetailResource"];
                    };
                };
            };
        };
    };
    updateProductInterface: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ProductInterface id */
                productInterface: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateProductInterfaceRequest"];
                "application/json": components["schemas"]["UpdateProductInterfaceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductInterfaceResource"];
                    };
                };
            };
        };
    };
    deleteProductInterface: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ProductInterface id */
                productInterface: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    updateProductInterfaceAttributesProducts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ProductInterface id */
                productInterface: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateProductInterfaceAttributesProductsRequest"];
                "application/json": components["schemas"]["UpdateProductInterfaceAttributesProductsRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductInterfaceResource"];
                    };
                };
            };
        };
    };
    toggleProductInterface: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productInterface: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            user?: components["schemas"]["ProductInterfaceResource"];
                        };
                    };
                };
            };
        };
    };
    getProductInterfaceData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            pricing_plans?: components["schemas"]["PricingPlanDetailResource"][];
                            product_interfaces_types?: components["schemas"]["ProductInterfaceTypeEnum"][];
                        };
                    };
                };
            };
        };
    };
    setPrimaryImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productInterface: number;
                media: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: boolean;
                    };
                };
            };
        };
    };
    setImageRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productInterface: number;
                media: number;
                variants: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: boolean;
                    };
                };
            };
        };
    };
    productInterfacesCompare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ProductInterfaces id */
                ids: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["ProductInterfaceDetailResource"];
                    };
                };
            };
        };
    };
    b5d2a5156430088750e3ca23d5c9c419: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productInterface: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreStarRequest"];
                "application/json": components["schemas"]["StoreStarRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["StarResource"];
                    };
                };
            };
        };
    };
    updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Profile id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProfits: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProfitResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/profit?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/profit?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/profit?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeProfit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreProfitRequest"];
                "application/json": components["schemas"]["StoreProfitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default profit has been stored successfully */
                        message: string;
                        data?: components["schemas"]["ProfitResource"];
                    };
                };
            };
        };
    };
    getProfitByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["ProfitDetailResource"];
                    };
                };
            };
        };
    };
    updateProfit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profit: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateProfitRequest"];
                "application/json": components["schemas"]["UpdateProfitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default profit has been updated successfully */
                        message: string;
                        data?: components["schemas"]["ProfitResource"];
                    };
                };
            };
        };
    };
    deleteProfit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default profit has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleProfit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default profit has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["ProfitResource"];
                    };
                };
            };
        };
    };
    getProvinces: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ProvinceResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/province?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/province?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/province?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeProvince: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreProvinceRequest"];
                "application/json": components["schemas"]["StoreProvinceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default province has been stored successfully */
                        message: string;
                        data?: components["schemas"]["ProvinceResource"];
                    };
                };
            };
        };
    };
    getProvinceByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                province: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["ProvinceDetailResource"];
                    };
                };
            };
        };
    };
    updateProvince: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                province: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateProvinceRequest"];
                "application/json": components["schemas"]["UpdateProvinceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default province has been updated successfully */
                        message: string;
                        data?: components["schemas"]["ProvinceResource"];
                    };
                };
            };
        };
    };
    deleteProvince: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                province: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default province has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSettingById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Setting id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "42a6288483ea594f9cdadef181f57fa8": {
        parameters: {
            query?: {
                filter_key?: string[];
            };
            header?: never;
            path: {
                /** @description setting enum key */
                setting: "product" | "company_info" | "default";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    updateSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Setting id */
                setting: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSettingRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingResource"];
                };
            };
        };
    };
    getSettingData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            templates?: ("company_info" | "product" | "default")[];
                            extra_data?: {
                                product?: {
                                    product_title?: {
                                        show_sku?: string;
                                        show_attribute?: string;
                                        show_brand?: string;
                                        show_category?: string;
                                    };
                                    product_price?: {
                                        show_out_of_stock_products_price?: string;
                                    };
                                    show_number_of_added_to_carts_in_product_detail?: string;
                                    show_number_of_sold_in_product_detail?: string;
                                };
                                company_info?: {
                                    address?: string;
                                    name?: string;
                                    tell?: string;
                                    phone?: string;
                                    email?: string;
                                    postal_code?: string;
                                    latitude?: string;
                                    longitude?: string;
                                };
                                default?: {
                                    media_id?: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    getShippingMethods: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ShippingMethodResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/shipping-method?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/shipping-method?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/shipping-method?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeShippingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreShippingMethodRequest"];
                "application/json": components["schemas"]["StoreShippingMethodRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default shipping-method has been stored successfully */
                        message: string;
                        data?: components["schemas"]["ShippingMethodResource"];
                    };
                };
            };
        };
    };
    getShippingMethodByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shippingMethod: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["ShippingMethodDetailResource"];
                    };
                };
            };
        };
    };
    updateShippingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shippingMethod: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateShippingMethodRequest"];
                "application/json": components["schemas"]["UpdateShippingMethodRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default shipping-method has been updated successfully */
                        message: string;
                        data?: components["schemas"]["ShippingMethodResource"];
                    };
                };
            };
        };
    };
    deleteShippingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shippingMethod: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default shipping-method has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleShippingMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shippingMethod: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default shipping-method has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["ShippingMethodResource"];
                    };
                };
            };
        };
    };
    getShippingMethodData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            drivers?: {
                                /** @default Post */
                                label: string;
                                /** @default post */
                                value: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    getSliders: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SliderResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/slider?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/slider?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/slider?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeSlider: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreSliderRequest"];
                "application/json": components["schemas"]["StoreSliderRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default slider has been stored successfully */
                        message: string;
                        data?: components["schemas"]["SliderResource"];
                    };
                };
            };
        };
    };
    getSliderByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["SliderDetailResource"];
                    };
                };
            };
        };
    };
    updateSlider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateSliderRequest"];
                "application/json": components["schemas"]["UpdateSliderRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default slider has been updated successfully */
                        message: string;
                        data?: components["schemas"]["SliderResource"];
                    };
                };
            };
        };
    };
    deleteSlider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default slider has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleSlider: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default slider has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["SliderResource"];
                    };
                };
            };
        };
    };
    getSliderItems: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path: {
                slider: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SliderItemResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/slider-item?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/slider-item?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/slider-item?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeSliderItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreSliderItemRequest"];
                "application/json": components["schemas"]["StoreSliderItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default sliderItem has been stored successfully */
                        message: string;
                        data?: components["schemas"]["SliderItemResource"];
                    };
                };
            };
        };
    };
    getSliderItemByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sliderItem: number;
                slider: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["SliderItemDetailResource"];
                    };
                };
            };
        };
    };
    updateSliderItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
                sliderItem: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateSliderItemRequest"];
                "application/json": components["schemas"]["UpdateSliderItemRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default sliderItem has been updated successfully */
                        message: string;
                        data?: components["schemas"]["SliderItemResource"];
                    };
                };
            };
        };
    };
    deleteSliderItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slider: number;
                sliderItem: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default sliderItem has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleSliderItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sliderItem: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default sliderItem has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["SliderItemResource"];
                    };
                };
            };
        };
    };
    getSliderItemData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            types?: {
                                /** @default Product */
                                label: string;
                                /** @default product */
                                value: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    splashAdmin: {
        parameters: {
            query: {
                /** @description Browser name */
                browser: "chrome" | "firefox" | "safari" | "edge" | "opera" | "ie" | "other";
                /** @description Admin version */
                admin_version: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /** @default Welcome to the API */
                            message: string;
                            /** @default 1.0.0 */
                            version: string;
                            currencies?: components["schemas"]["CurrencyResource"][];
                            supported_locales?: {
                                /** @default English */
                                label: string;
                                /** @default en */
                                value: string;
                            }[];
                            default_weight_unit?: components["schemas"]["UnitSimpleResource"];
                            default_length_unit?: components["schemas"]["UnitSimpleResource"];
                            default_count?: components["schemas"]["UnitSimpleResource"];
                        };
                    };
                };
            };
        };
    };
    splashSite: {
        parameters: {
            query: {
                /** @description Browser name */
                browser: "chrome" | "firefox" | "safari" | "edge" | "opera" | "ie" | "other";
                /** @description Website version */
                website_version: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /** @default Welcome to the API */
                            message: string;
                            /** @default 1.0.0 */
                            version: string;
                            currencies?: components["schemas"]["CurrencyResource"][];
                            supported_locales?: {
                                /** @default English */
                                label: string;
                                /** @default en */
                                value: string;
                            }[];
                            default_weight_unit?: components["schemas"]["UnitSimpleResource"];
                            default_length_unit?: components["schemas"]["UnitSimpleResource"];
                            default_count?: components["schemas"]["UnitSimpleResource"];
                        };
                    };
                };
            };
        };
    };
    splashApp: {
        parameters: {
            query: {
                /** @description OS name */
                os: "android" | "ios";
                /** @description OS version */
                os_version: string;
                /** @description Device build number */
                device_build_number: string;
                /** @description Device name */
                device: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            /** @default Welcome to the API */
                            message: string;
                            /** @default 1.0.0 */
                            version: string;
                            currencies?: components["schemas"]["CurrencyResource"][];
                            supported_locales?: {
                                /** @default English */
                                label: string;
                                /** @default en */
                                value: string;
                            }[];
                            default_weight_unit?: components["schemas"]["UnitSimpleResource"];
                            default_length_unit?: components["schemas"]["UnitSimpleResource"];
                            default_count?: components["schemas"]["UnitSimpleResource"];
                        };
                    };
                };
            };
        };
    };
    getStories: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
                "filter[category]"?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["StoryResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/story?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/story?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/story?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeStory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreStoryRequest"];
                "application/json": components["schemas"]["StoreStoryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default story has been stored successfully */
                        message: string;
                        data?: components["schemas"]["StoryResource"];
                    };
                };
            };
        };
    };
    getStoryByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                story: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["StoryDetailResource"];
                    };
                };
            };
        };
    };
    updateStory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                story: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateStoryRequest"];
                "application/json": components["schemas"]["UpdateStoryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default story has been updated successfully */
                        message: string;
                        data?: components["schemas"]["StoryResource"];
                    };
                };
            };
        };
    };
    deleteStory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                story: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default story has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleStory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                story: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default story has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["StoryResource"];
                    };
                };
            };
        };
    };
    likeStory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                story: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default No message */
                        message: string;
                    };
                };
            };
        };
    };
    getStoryData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            types?: components["schemas"]["StoryTypeEnum"][];
                        };
                    };
                };
            };
        };
    };
    readStories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ReadStoryRequest"];
                "application/json": components["schemas"]["ReadStoryRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default Stories have been read successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getTags: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/tag?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/tag?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/tag?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    storeTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreTagRequest"];
                "application/json": components["schemas"]["StoreTagRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default tag has been stored successfully */
                        message: string;
                        data?: components["schemas"]["TagResource"];
                    };
                };
            };
        };
    };
    getTagByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["TagDetailResource"];
                    };
                };
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateTagRequest"];
                "application/json": components["schemas"]["UpdateTagRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default tag has been updated successfully */
                        message: string;
                        data?: components["schemas"]["TagResource"];
                    };
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default tag has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    getTagData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            types?: components["schemas"]["TagTypeEnum"][];
                        };
                    };
                };
            };
        };
    };
    getTaxs: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["TaxResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeTax: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreTaxRequest"];
                "application/json": components["schemas"]["StoreTaxRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default tax group has been stored successfully */
                        message: string;
                        data?: components["schemas"]["TaxResource"];
                    };
                };
            };
        };
    };
    getTaxByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tax id */
                tax: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["TaxDetailResource"];
                    };
                };
            };
        };
    };
    updateTax: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tax id */
                tax: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateTaxRequest"];
                "application/json": components["schemas"]["UpdateTaxRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default tax group has been updated successfully */
                        message: string;
                        data?: components["schemas"]["TaxResource"];
                    };
                };
            };
        };
    };
    deleteTax: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tax id */
                tax: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default tax group has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleTax: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description tax id */
                tax: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default tax group has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["TaxResource"];
                    };
                };
            };
        };
    };
    test: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    file?: Record<string, never>;
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutResource"];
                    };
                };
            };
        };
    };
    testPut: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    file?: Record<string, never>;
                    name?: string;
                    family?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["LayoutResource"];
                    };
                };
            };
        };
    };
    getTickets: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    storeTicket: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreTicketRequest"];
                "application/json": components["schemas"]["StoreTicketRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getTicketByUUID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Ticket uuid */
                ticket: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    updateTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Ticket uuid */
                ticket: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateTicketRequest"];
                "application/json": components["schemas"]["UpdateTicketRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    deleteTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Ticket uuid */
                ticket: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getTicketMessages: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketMessageResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    storeTicketMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreTicketMessageRequest"];
                "application/json": components["schemas"]["StoreTicketMessageRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketMessageResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getTicketMessageByUUID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description TicketMessage uuid */
                ticketMessage: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketMessageResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    updateTicketMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description TicketMessage uuid */
                ticketMessage: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateTicketMessageRequest"];
                "application/json": components["schemas"]["UpdateTicketMessageRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["TicketMessageResource"];
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    deleteTicketMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description TicketMessage uuid */
                ticketMessage: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            500: components["responses"]["500"];
        };
    };
    getUnits: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["UnitResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeUnit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreUnitRequest"];
                "application/json": components["schemas"]["StoreUnitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default unit of measurement has been stored successfully */
                        message: string;
                        data?: components["schemas"]["UnitResource"];
                    };
                };
            };
        };
    };
    getUnitByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit id */
                unit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["UnitDetailResource"];
                    };
                };
            };
        };
    };
    updateUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit id */
                unit: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateUnitRequest"];
                "application/json": components["schemas"]["UpdateUnitRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default unit of measurement has been updated successfully */
                        message: string;
                        data?: components["schemas"]["UnitResource"];
                    };
                };
            };
        };
    };
    deleteUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit id */
                unit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default unit of measurement has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    toggleUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit id */
                unit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default unit of measurement has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["UnitResource"];
                    };
                };
            };
        };
    };
    DefaultUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unit id */
                unit: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default unit of measurement has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["UnitResource"];
                    };
                };
            };
        };
    };
    getUnitData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            types?: components["schemas"]["UnitTypeEnum"][];
                        };
                    };
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    storeUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreUserRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserGroups: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["UserGroupResource"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
        };
    };
    storeUserGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreUserGroupRequest"];
                "application/json": components["schemas"]["StoreUserGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["UserGroupResource"];
                    };
                };
            };
        };
    };
    getUserGroupByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UserGroup id */
                userGroup: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["UserGroupDetailResource"];
                    };
                };
            };
        };
    };
    updateUserGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UserGroup id */
                userGroup: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateUserGroupRequest"];
                "application/json": components["schemas"]["UpdateUserGroupRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: components["schemas"]["UserGroupResource"];
                    };
                };
            };
        };
    };
    deleteUserGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description UserGroup uuid */
                userGroup: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                    };
                };
            };
        };
    };
    getUserGroupData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default example message */
                        message: string;
                        data?: {
                            type?: components["schemas"]["UserGroupEnum"][];
                            exceptions_type?: {
                                label?: string;
                                value?: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    getUserRequests: {
        parameters: {
            query?: {
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
                /** @description Search in events */
                "filter[a_search][]"?: components["parameters"]["advanced_search"];
                /** @description Sort criteria for shifts (e.g., name, -created_at) */
                sort?: components["parameters"]["sort"];
            };
            header?: never;
            path: {
                type: "bulk_purchase" | "leave" | "salary_increase" | "subscribe_course" | "request_loan";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserRequestResource"][];
                        links?: {
                            /** @default http://localhost/api/v1/user-request?page=1 */
                            first: string;
                            /** @default http://localhost/api/v1/user-request?page=4 */
                            last: string;
                            /** @default null */
                            prev: string;
                            /** @default http://localhost/api/v1/user-request?page=2 */
                            next: string;
                        };
                        meta?: components["schemas"]["Meta"];
                        /** @default No message */
                        message: string;
                        advance_search_field?: {
                            /** @default id */
                            key: string;
                            /** @default text */
                            label: string;
                            /** @default number */
                            type: string;
                        }[];
                        extra?: {
                            /** @default -id */
                            default_sort: string;
                            /** @default [
                             *       "id",
                             *       "created_at",
                             *       "updated_at"
                             *     ] */
                            sorts: string[];
                        };
                    };
                };
            };
        };
    };
    getUserRequestByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userRequest: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: components["schemas"]["UserRequestBulkPurchaseResource"];
                    };
                };
            };
        };
    };
    storeBulkPurchaseRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreUserRequestBulkPurchaseRequest"];
                "application/json": components["schemas"]["StoreUserRequestBulkPurchaseRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user-request has been stored successfully */
                        message: string;
                        data?: components["schemas"]["UserRequestResource"];
                    };
                };
            };
        };
    };
    updateBulkPurchaseRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userRequest: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateUserRequestBulkPurchaseRequest"];
                "application/json": components["schemas"]["UpdateUserRequestBulkPurchaseRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user-request has been updated successfully */
                        message: string;
                        data?: components["schemas"]["UserRequestResource"];
                    };
                };
            };
        };
    };
    storeNotifyWhenAvailableRequest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreUserRequestNotifyWhenAvailableRequest"];
                "application/json": components["schemas"]["StoreUserRequestNotifyWhenAvailableRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user-request has been stored successfully */
                        message: string;
                        data?: components["schemas"]["UserRequestResource"];
                    };
                };
            };
        };
    };
    updateNotifyWhenAvailableRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userRequest: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateUserRequestNotifyWhenAvailableRequest"];
                "application/json": components["schemas"]["UpdateUserRequestNotifyWhenAvailableRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user-request has been updated successfully */
                        message: string;
                        data?: components["schemas"]["UserRequestResource"];
                    };
                };
            };
        };
    };
    deleteUserRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userRequest: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default true */
                        data: boolean;
                        /** @default user-request has been deleted successfully */
                        message: string;
                    };
                };
            };
        };
    };
    confirmUserRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userRequest: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user-request has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["UserRequestResource"];
                    };
                };
            };
        };
    };
    rejectUserRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userRequest: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default user-request has been toggled successfully */
                        message: string;
                        data?: components["schemas"]["UserRequestResource"];
                    };
                };
            };
        };
    };
    getUserRequestData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            status?: components["schemas"]["UserRequestStatusEnum"][];
                            type?: components["schemas"]["UserRequestTypeEnum"][];
                            extra_data?: {
                                bulk_purchase?: {
                                    fields?: {
                                        /** @default name */
                                        name: string;
                                        /** @default label */
                                        label: string;
                                        /**
                                         * @default number
                                         * @enum {string}
                                         */
                                        type: "number" | "select";
                                        /**
                                         * @default 1
                                         * @enum {boolean}
                                         */
                                        required: 0 | 1;
                                        /** @default [
                                         *       "min:1",
                                         *       "exists:products,id"
                                         *     ] */
                                        rules: string[];
                                    }[];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    uploadPrivate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file?: string;
                    /**
                     * @default 1
                     * @example
                     */
                    media_id?: Record<string, never>;
                    /** @default 1 */
                    model_id: Record<string, never>;
                    /**
                     * @default ProductInterface
                     * @enum {string}
                     */
                    model_type: "ProductInterface" | "Setting" | "User" | "Brand" | "Category" | "Tag" | "Story" | "LayoutSection" | "SliderItem";
                    /**
                     * @default image
                     * @enum {string}
                     */
                    collection: "image" | "video" | "default_image";
                    /**
                     * @default add
                     * @enum {string}
                     */
                    action: "add" | "delete";
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default file uploaded successfully */
                        message: string;
                        data?: Record<string, never>;
                    };
                };
            };
        };
    };
    selectByModel: {
        parameters: {
            query?: {
                /** @description category: product-blog-notice-highlight-portfolio-faq-report </br> unit: count-length-weight </br> attribute: text-color </br> slider_item: product-brand-category-discount-link-filter-timer </br> tag: special */
                type?: "product" | "blog" | "notice" | "highlight" | "portfolio" | "faq" | "report" | "count" | "length" | "weight" | "text" | "color" | "brand" | "category" | "discount" | "link" | "filter" | "timer" | "special";
                /** @description you must send as query param param1=1&param2=2 </br> category: attribute_group_id */
                options?: string;
                "filter[search]"?: components["parameters"]["search"];
            };
            header?: never;
            path: {
                model: "user" | "product" | "product_interface" | "brand" | "category" | "attribute_group" | "attribute" | "attribute_value" | "tax" | "unit" | "tag" | "currency" | "user_group" | "setting" | "user_group" | "profit" | "pricing_plan";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            value?: string;
                            label?: string;
                        }[];
                    };
                };
            };
        };
    };
    adaptiveFilter: {
        parameters: {
            query?: {
                "with-products"?: 0 | 1;
                sort?: "newest" | "oldest" | "price-low-to-high" | "price-high-to-low" | "popular" | "best-selling" | "top-rated" | "most-reviewed" | "most-viewed";
                "filter[in-stock]"?: 0 | 1;
                "filter[category]"?: string;
                "filter[brand]"?: string;
                "filter[attribute]"?: string;
                "filter[price]"?: string;
                /** @description page number */
                page?: components["parameters"]["page"];
                /** @description number of items per page */
                page_limit?: components["parameters"]["page_limit"];
                "filter[search]"?: components["parameters"]["search"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            url?: string;
                            price_range?: {
                                min?: number;
                                max?: number;
                            };
                            categories?: {
                                value?: number;
                                label?: string;
                                children?: {
                                    value?: number;
                                    label?: string;
                                }[];
                            }[];
                            brands?: {
                                value?: number;
                                label?: string;
                            }[];
                            sorts?: {
                                value?: string;
                                label?: string;
                            }[];
                            attributes?: {
                                value?: number;
                                label?: string;
                                type?: {
                                    value?: number;
                                    label?: string;
                                };
                                special?: boolean;
                                values?: {
                                    value?: number;
                                    label?: string;
                                }[];
                            }[];
                            products?: {
                                data?: components["schemas"]["ProductResource"][];
                                meta?: components["schemas"]["Meta"];
                            };
                        };
                    };
                };
            };
        };
    };
    adaptiveSearch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    in: ("product" | "category" | "brand" | "attribute")[];
                    /** @default  */
                    search: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default No message */
                        message: string;
                        data?: {
                            url?: string;
                            price_range?: {
                                min?: number;
                                max?: number;
                            };
                            categories?: {
                                value?: number;
                                label?: string;
                                children?: {
                                    value?: number;
                                    label?: string;
                                }[];
                            }[];
                            brands?: {
                                value?: number;
                                label?: string;
                            }[];
                            attributes?: {
                                value?: number;
                                label?: string;
                                type?: {
                                    value?: number;
                                    label?: string;
                                };
                                special?: boolean;
                                values?: {
                                    value?: number;
                                    label?: string;
                                }[];
                            }[];
                        };
                    };
                };
            };
        };
    };
}
