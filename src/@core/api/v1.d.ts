/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a loggend in user
         * @description Retrieve a loggend in user as user resource
         */
        get: operations["a4bc642ec00185478bc9639b706aa226"];
        put?: never;
        /**
         * login
         * @description loggend in user as User resource and token
         */
        post: operations["eecd875305a510812e3cfb3b2ecf4597"];
        /** logout */
        delete: operations["df2eee26444444a49a587c8073a4bf74"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doctors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of doctors
         * @description Retrieve filtered data for doctors
         */
        get: operations["cd066ac893c261ef13773c81ebc8c53e"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doctors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get doctor information
         * @description Returns doctor data
         */
        get: operations["e1197502d654b6b4b5f3d7894ee43e80"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * home
         * @description home data
         */
        get: operations["96ccc37cd35051ad90e041d369802410"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hospitals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of hospitals
         * @description get all hospitals from the database as hospital resource
         */
        get: operations["04133cbf993f335bdb1e35a58c500c1b"];
        put?: never;
        /**
         * Store new Hospital
         * @description Returns created Hospital data
         */
        post: operations["0ab3300ee914a752b8b453ef4ea7f0c3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hospitals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hospital information
         * @description Returns hospital data
         */
        get: operations["b45a9fedc9ccff7d6e29c17b60ec200f"];
        /**
         * Update existing hospital
         * @description Returns updated hospital data
         */
        put: operations["8e649c100ec0bb790b3c8c897903a610"];
        post?: never;
        /**
         * Delete hospital record
         * @description Returns delete status
         */
        delete: operations["61bde55e77855d5fd5394f8c990640a7"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Store new Slide
         * @description Returns created Slide data
         */
        post: operations["d68f02bbffdeef5996d8e7286b362f9f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slides/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Slide information
         * @description Returns Slide data
         */
        get: operations["7ccba6856ecb8384de5ba5859f54a978"];
        /**
         * Update existing Slide
         * @description Returns updated Slide data
         */
        put: operations["f3070ad18858c5f1a7514e35967c7d7b"];
        post?: never;
        /**
         * Delete Slide record
         * @description Returns delete status
         */
        delete: operations["955b350565c5e98b5f0228aaca70b32c"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sliders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of sliders
         * @description get all sliders from the database as slider resource
         */
        get: operations["cc61defe0228a78cfd161ef9bc03f937"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sliders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Slider information
         * @description Returns Slider data
         */
        get: operations["d7c869cdc8d198956063e40717607260"];
        /**
         * Update existing Slider
         * @description Returns updated Slider data
         */
        put: operations["99445685e00f51b9a39e7af94ccb4d57"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a categories items
         * @description Retrieve categories items as terms resource
         */
        get: operations["d5667ffe66f0c410e63b85f00fa2ecd6"];
        put?: never;
        /**
         * store a category item
         * @description Retrieve category item as terms resource
         */
        post: operations["1a6f4d61185ab52b011b89d4c16cde38"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * show a category item
         * @description Retrieve category item as terms resource
         */
        get: operations["34f9180e8b773588bddbbdc1e7241f0d"];
        /**
         * Update existing category item
         * @description Returns updated category item data
         */
        put: operations["fc726b27a16f5e8efc2177ac826fdf7a"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/term": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete existing category item */
        delete: operations["297ba56037e24b0cd3755e57828d6548"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * LinksPaginationResource
         * @description links pagination resource
         */
        LinksPaginationResource: {
            first: string;
            last: string;
            prev?: string;
            next?: string;
        };
        /**
         * MetaPaginationResource
         * @description meta pagination resource
         */
        MetaPaginationResource: {
            current_page: number;
            from: number;
            last_page: number;
            links: {
                url?: string;
                label?: string;
                active?: boolean;
            }[];
            path: string;
            per_page: number;
            to: number;
            total: number;
        };
        StoreAuthResourceRequest: {
            /** @description email of user */
            email: string;
            /** @description password of user */
            password: string;
        };
        StoreHospitalResourceRequest: {
            /** @description The name of the hospital */
            name: string;
            /** @description phone number of hospital */
            fax: string;
            address?: string;
            /** Format: uri */
            address_link?: string;
            email?: string;
            /**
             * Format: binary
             * @description An image file for the hospital
             */
            image: string;
            /**
             * Format: binary
             * @description thumbnail file for the hospital
             */
            thumbnail: string;
            /**
             * Format: binary
             * @description main thumbnail file for the hospital
             */
            main_thumbnail: string;
        };
        StoreSlideResourceRequest: {
            /** @description The title of the slide */
            title?: string;
            /** @description slider id that related to slide */
            slider_id: number;
            /** @description A description of the slide */
            description?: string;
            /** @description The ordering number for the slide */
            ordering: number;
            /**
             * Format: uri
             * @description The link related to the slide
             */
            link?: string;
            /**
             * Format: binary
             * @description An image file for the slide
             */
            image: string;
            /** @description An array of buttons for the slide */
            button?: {
                /** @description The title of the button */
                title?: string;
                /**
                 * Format: uri
                 * @description The link for the button
                 */
                link?: string;
            }[];
        };
        StoreTermResourceRequest: {
            /** @description title of category item */
            title: string;
            /** @description parent of category item */
            taxonomy_id: number;
            /** @description slug of category item */
            slug?: string;
        };
        UpdateHospitalResourceRequest: {
            /** @description The name of the hospital */
            name: string;
            /** @description phone number of hospital */
            fax: string;
            address?: string;
            /** Format: uri */
            address_link?: string;
            email?: string;
            /**
             * Format: binary
             * @description An image file for the hospital
             */
            image?: string;
            /**
             * Format: binary
             * @description thumbnail file for the hospital
             */
            thumbnail?: string;
            /**
             * Format: binary
             * @description main thumbnail file for the hospital
             */
            main_thumbnail?: string;
        };
        UpdateSlideResourceRequest: {
            /** @description The title of the slide */
            title?: string;
            /** @description A description of the slide */
            description?: string;
            /** @description The ordering number for the slide */
            ordering: number;
            /**
             * Format: uri
             * @description The link related to the slide
             */
            link?: string;
            /**
             * Format: binary
             * @description An image file for the slide
             */
            image: string;
            /** @description An array of buttons for the slide */
            button?: {
                /** @description The title of the button */
                title?: string;
                /**
                 * Format: uri
                 * @description The link for the button
                 */
                link?: string;
            }[];
        };
        /** @description Update Slider request body data */
        UpdateSliderResourceRequest: Record<string, never>;
        UpdateTermResourceRequest: {
            /** @description title of category item */
            title?: string;
            /** @description parent of category item */
            taxonomy_id?: number;
            /** @description slug of category item */
            slug?: string;
            /** @description category item show on client main page */
            is_main?: boolean;
            /** @description category item show on client filter page */
            is_filter?: boolean;
            /** @description category item show on client footer */
            is_footer?: boolean;
        };
        /**
         * DoctorResource
         * @description Doctor resource
         */
        DoctorResource: {
            /** @description id of the doctor */
            id: number;
            /** @description first name of the doctor */
            first_name: string;
            /** @description code number of the doctor */
            code: string;
            /** @description last name of the doctor */
            last_name: string;
            /** @description full name of the doctor */
            full_name: string;
            /** @description sub title of the doctor */
            sub_title: string;
            /** @description short description url of the doctor */
            short_description: string;
            /** @description redirect link of the doctor */
            redirect: string;
            /** @description gender of doctor */
            gender: string;
            /** @description description of doctor */
            description?: string;
            image: components["schemas"]["FileResource"];
            /** @description portfolio of doctor */
            portfolio?: components["schemas"]["FileResource"][];
            /** @description categories item of doctor */
            terms: components["schemas"]["TermResource"][];
        };
        /**
         * FileResource
         * @description File resource
         */
        FileResource: {
            /** @description ID of the slider */
            id: number;
            /** @description name of the file */
            file_name?: string;
            /**
             * Format: uri
             * @description preview url of the File
             */
            preview_url?: string;
            /**
             * Format: uri
             * @description original url of the File
             */
            original_url?: string;
            /** @description extension of the File */
            extension?: string;
            /** @description size of extension */
            size?: number;
        };
        /**
         * HomeResource
         * @description HomeResource resource
         */
        HomeResource: {
            /** @description List of sliders of home page */
            sliders?: components["schemas"]["SliderResource"][];
            /** @description terms list of home page */
            main_terms?: components["schemas"]["TermResource"][];
            /** @description terms list of home page */
            footer_terms?: components["schemas"]["TermResource"][];
            /** @description hospital list of home page */
            hospitals?: components["schemas"]["HospitalResource"][];
        };
        HospitalResource: {
            id: number;
            /** @description The name of the hospital */
            name: string;
            fax: string;
            address?: string;
            address_link?: string;
            /** Format: uri */
            email: string;
            image: components["schemas"]["FileResource"];
            main_thumbnail: components["schemas"]["FileResource"];
            thumbnail: components["schemas"]["FileResource"];
        };
        SlideResource: {
            /** @description The title of the slide */
            id?: number;
            /** @description The title of the slide */
            title: string;
            /** @description A brief description of the slide */
            description: string;
            /**
             * Format: uri
             * @description The link associated with the slide
             */
            link: string;
            image: components["schemas"]["FileResource"];
            /** @description The button data for the slide, if available */
            button?: {
                /** @description The title of the button */
                title?: string;
                /**
                 * Format: uri
                 * @description The link of the button
                 */
                link?: string;
            };
        };
        /**
         * SliderResource
         * @description Slider resource
         */
        SliderResource: {
            /** @description ID of the slider */
            id: number;
            /** @description name of the slider */
            name?: string;
            /** @description description of the slider */
            description?: string;
            /** @description key of the slider */
            key?: string;
            /** @description URL of the slider image */
            thumbnails?: components["schemas"]["FileResource"][];
            /** @description List of slides of slider */
            slides?: components["schemas"]["SlideResource"][];
        };
        /**
         * TaxonomyResource
         * @description Taxonomy resource
         */
        TaxonomyResource: {
            /** @description title of Taxonomy */
            title: string;
            /** @description key of Taxonomy */
            key: string;
            /** @description categories item of doctor */
            terms?: components["schemas"]["TermResource"][];
        };
        /**
         * TermResource
         * @description Term resource
         */
        TermResource: {
            /** @description ID of the category item */
            id: number;
            /** @description title of the category item */
            title?: string;
            /** @description slug of the category item */
            slug?: string;
        };
        /**
         * UserResource
         * @description User resource
         */
        UserResource: {
            /** @description ID of the user */
            id: number;
            /** @description name of the user */
            first_name?: string;
            /** @description last name of the user */
            last_name?: string;
            /** @description full name of the user */
            full_name?: string;
            /** @description phone number of the user */
            phone?: string;
            /** @description email of the user */
            email?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    a4bc642ec00185478bc9639b706aa226: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user logged in retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    eecd875305a510812e3cfb3b2ecf4597: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreAuthResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    df2eee26444444a49a587c8073a4bf74: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user logout successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cd066ac893c261ef13773c81ebc8c53e: {
        parameters: {
            query?: {
                /** @description search in data of doctors */
                "filter[search]"?: string;
                /** @description filter doctrs by gender (male or female) example:male */
                "filter[gender]"?: string;
                /** @description filter doctrs by terms and explode by , example:26,25 */
                "filter[terms]"?: string;
                /** @description filter doctrs by hospital_id */
                "filter[hospital]"?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    e1197502d654b6b4b5f3d7894ee43e80: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description doctor id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResource"];
                };
            };
        };
    };
    "96ccc37cd35051ad90e041d369802410": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "04133cbf993f335bdb1e35a58c500c1b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of hospitals retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "0ab3300ee914a752b8b453ef4ea7f0c3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreHospitalResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    b45a9fedc9ccff7d6e29c17b60ec200f: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description hospital id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "8e649c100ec0bb790b3c8c897903a610": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description hospital id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateHospitalResourceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UpdateHospitalResourceRequest"];
                "application/json": components["schemas"]["UpdateHospitalResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateHospitalResourceRequest"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "61bde55e77855d5fd5394f8c990640a7": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description hospital id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    d68f02bbffdeef5996d8e7286b362f9f: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreSlideResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlideResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7ccba6856ecb8384de5ba5859f54a978": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slide id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlideResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    f3070ad18858c5f1a7514e35967c7d7b: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slide id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateSlideResourceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UpdateSlideResourceRequest"];
                "application/json": components["schemas"]["UpdateSlideResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlideResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "955b350565c5e98b5f0228aaca70b32c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slide id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cc61defe0228a78cfd161ef9bc03f937: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of sliders retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SliderResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    d7c869cdc8d198956063e40717607260: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slider id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SliderResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "99445685e00f51b9a39e7af94ccb4d57": {
        parameters: {
            query?: {
                /** @description slider name */
                name?: string;
                /** @description slider description */
                description?: string;
                /** @description slider thumbnails */
                thumbnails?: Record<string, never>[];
            };
            header?: never;
            path: {
                /** @description Slider id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSliderResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SliderResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    d5667ffe66f0c410e63b85f00fa2ecd6: {
        parameters: {
            query?: {
                /** @description search in data of terms */
                "filter[search]"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Categories items retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TermResource"][];
                    };
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "1a6f4d61185ab52b011b89d4c16cde38": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreTermResourceRequest"];
            };
        };
        responses: {
            /** @description categories item in store successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "34f9180e8b773588bddbbdc1e7241f0d": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description categories item in store successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    fc726b27a16f5e8efc2177ac826fdf7a: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTermResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "297ba56037e24b0cd3755e57828d6548": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description category item destroy successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
