/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a loggend in user
         * @description Retrieve a loggend in user as user resource
         */
        get: operations["a4bc642ec00185478bc9639b706aa226"];
        put?: never;
        /**
         * login
         * @description loggend in user as User resource and token
         */
        post: operations["eecd875305a510812e3cfb3b2ecf4597"];
        /** logout */
        delete: operations["df2eee26444444a49a587c8073a4bf74"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Refresh authentication token
         * @description Refresh the authentication token using refresh token
         */
        put: operations["5a58f12544175cff1995af27dfdb9469"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a paginated list of blogs
         * @description Retrieve a paginated list of blog resources.
         */
        get: operations["getBlogs"];
        put?: never;
        /**
         * Create a new blog
         * @description Store a new blog in the database
         */
        post: operations["510eea3a968d4abf17a79e7f7003adf7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific blog
         * @description Retrieve a specific blog resource by its ID.
         */
        get: operations["getBlogById"];
        /**
         * Update an existing blog
         * @description Update the details of an existing blog resource.
         */
        put: operations["updateBlog"];
        post?: never;
        /**
         * Delete a specific blog
         * @description Remove a specific blog resource by its ID.
         */
        delete: operations["deleteBlog"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doctors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of doctors
         * @description Retrieve filtered data for doctors
         */
        get: operations["cd066ac893c261ef13773c81ebc8c53e"];
        put?: never;
        /**
         * Create a new doctor
         * @description Store a new doctor in the database
         */
        post: operations["08504526ddafe7c7f25782a3b582fb29"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doctors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single doctor
         * @description Retrieve a single doctor by ID
         */
        get: operations["getDoctor"];
        /**
         * Update an existing doctor
         * @description Update a doctor in the database
         */
        put: operations["updateDoctor"];
        post?: never;
        /**
         * Delete an existing doctor
         * @description Delete a doctor from the database
         */
        delete: operations["deleteDoctor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * home
         * @description home data
         */
        get: operations["96ccc37cd35051ad90e041d369802410"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hospitals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of hospitals
         * @description get all hospitals from the database as hospital resource
         */
        get: operations["04133cbf993f335bdb1e35a58c500c1b"];
        put?: never;
        /**
         * Store new Hospital
         * @description Returns created Hospital data
         */
        post: operations["0ab3300ee914a752b8b453ef4ea7f0c3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hospitals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hospital information
         * @description Returns hospital data
         */
        get: operations["b45a9fedc9ccff7d6e29c17b60ec200f"];
        /**
         * Update existing hospital
         * @description Returns updated hospital data
         */
        put: operations["8e649c100ec0bb790b3c8c897903a610"];
        post?: never;
        /**
         * Delete hospital record
         * @description Returns delete status
         */
        delete: operations["61bde55e77855d5fd5394f8c990640a7"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of roles
         * @description Retrieve all available roles in the system
         */
        get: operations["6e28bdec08d7292bde33180ca5928718"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** جستجوی دکترها و ترم‌ها */
        get: operations["searchIndex"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Store new Slide
         * @description Returns created Slide data
         */
        post: operations["d68f02bbffdeef5996d8e7286b362f9f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/slides/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Slide information
         * @description Returns Slide data
         */
        get: operations["7ccba6856ecb8384de5ba5859f54a978"];
        /**
         * Update existing Slide
         * @description Returns updated Slide data
         */
        put: operations["f3070ad18858c5f1a7514e35967c7d7b"];
        post?: never;
        /**
         * Delete Slide record
         * @description Returns delete status
         */
        delete: operations["955b350565c5e98b5f0228aaca70b32c"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sliders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of sliders
         * @description get all sliders from the database as slider resource
         */
        get: operations["cc61defe0228a78cfd161ef9bc03f937"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sliders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Slider information
         * @description Returns Slider data
         */
        get: operations["d7c869cdc8d198956063e40717607260"];
        /**
         * Update existing Slider
         * @description Returns updated Slider data
         */
        put: operations["99445685e00f51b9a39e7af94ccb4d57"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/taxonomies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of taxonomies */
        get: operations["056dd01386c7c072d4c885b73ca293d6"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a categories items
         * @description Retrieve categories items as terms resource
         */
        get: operations["d5667ffe66f0c410e63b85f00fa2ecd6"];
        put?: never;
        /**
         * store a category item
         * @description Retrieve category item as terms resource
         */
        post: operations["1a6f4d61185ab52b011b89d4c16cde38"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/terms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * show a category item
         * @description Retrieve category item as terms resource
         */
        get: operations["34f9180e8b773588bddbbdc1e7241f0d"];
        /**
         * Update existing category item
         * @description Returns updated category item data
         */
        put: operations["fc726b27a16f5e8efc2177ac826fdf7a"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/term/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete existing category item */
        delete: operations["6c8c3bf110028e26cde48c141334eef2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of users
         * @description Retrieve paginated and filtered list of users
         */
        get: operations["7e2f5799553ec93c9c43e2a58490d447"];
        put?: never;
        /**
         * Create a new user
         * @description Store a newly created user in storage
         */
        post: operations["a1fce870c566eb5fc0cf3178ec5d2fed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user information
         * @description Returns user data
         */
        get: operations["910a0c7cf580e1c605648d82a4e57f46"];
        /**
         * Update existing user
         * @description Returns updated user data. Note: Role cannot be changed via update.
         */
        put: operations["ddfe232db1870b82493bf8bd25596d37"];
        post?: never;
        /**
         * Delete user
         * @description Deletes a user and returns no content
         */
        delete: operations["43dd20becb1f47444e484cbb18ce345c"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * LinksPaginationResource
         * @description links pagination resource
         */
        LinksPaginationResource: {
            first: string;
            last: string;
            prev?: string;
            next?: string;
        };
        /**
         * MetaPaginationResource
         * @description meta pagination resource
         */
        MetaPaginationResource: {
            current_page: number;
            from: number;
            last_page: number;
            links: {
                url?: string;
                label?: string;
                active?: boolean;
            }[];
            path: string;
            per_page: number;
            to: number;
            total: number;
        };
        /**
         * ValidationErrorResponse
         * @description 422 Validation Error Response
         */
        ValidationErrorResponse: {
            /**
             * @description Validation error message
             * @example خطا در اعتبارسنجی ورودی‌ها
             */
            message: string;
            /**
             * @description Field validation errors
             * @example {
             *       "email": [
             *         "The email field is required."
             *       ],
             *       "password": [
             *         "The password field must be at least 8 characters."
             *       ]
             *     }
             */
            errors: Record<string, never>;
        };
        StoreAuthResourceRequest: {
            /** @description email of user */
            email: string;
            /** @description password of user */
            password: string;
        };
        /**
         * Store Blog Request
         * @description Schema for storing a blog
         */
        StoreBlogRequest: {
            /** @description Title of the blog */
            title: string;
            /** @description Subtitle of the blog */
            sub_title?: string | null;
            /** @description Description of the blog */
            description: string;
            /** @description Duration of the blog */
            duration?: number | null;
            /** @description type of blog. values: blog,news,social_responsibilty . default: blog */
            type?: string | null;
            /** @description publish status of the blog  */
            published?: boolean | null;
            /**
             * Format: binary
             * @description Main image of the blog
             */
            main_image: string;
        };
        StoreDoctorRequest: {
            /** @example John */
            first_name: string;
            /** @example Doe */
            last_name: string;
            /** @example DOC123 */
            code: string;
            /** @example MD */
            sub_title?: string;
            /** @example Experienced doctor */
            short_description?: string;
            /**
             * Format: url
             * @example http://example.com
             */
            redirect: string;
            /** @example Detailed description */
            description?: string;
            /**
             * @example male
             * @enum {string}
             */
            gender: "male" | "female";
            /** @example 1 */
            hospital_id?: number;
            /** Format: binary */
            main_image?: string;
            terms?: number[];
            portfolio?: string[];
        };
        StoreHospitalResourceRequest: {
            /** @description The name of the hospital */
            name: string;
            /** @description phone number of hospital */
            fax: string;
            address?: string;
            /** Format: uri */
            address_link?: string;
            email?: string;
            /**
             * Format: binary
             * @description An image file for the hospital
             */
            image: string;
            /**
             * Format: binary
             * @description thumbnail file for the hospital
             */
            thumbnail: string;
        };
        StoreSlideResourceRequest: {
            /** @description The title of the slide */
            title?: string;
            /** @description slider id that related to slide */
            slider_id: number;
            /** @description A description of the slide */
            description?: string;
            /** @description The ordering number for the slide */
            ordering?: number;
            /**
             * Format: uri
             * @description The link related to the slide
             */
            link?: string;
            /**
             * Format: binary
             * @description An image file for the slide
             */
            image: string;
            /** @description An array of buttons for the slide */
            button?: {
                /** @description The title of the button */
                title?: string;
                /**
                 * Format: uri
                 * @description The link for the button
                 */
                link?: string;
            }[];
        };
        StoreTermResourceRequest: {
            /** @description title of category item */
            title: string;
            /** @description parent of category item */
            taxonomy_id: number;
            /** @description slug of category item */
            slug?: string;
        };
        /**
         * Store User Request
         * @description Request body for creating a new user
         */
        StoreUserRequest: {
            /**
             * @description User's first name
             * @example John
             */
            firstname: string;
            /**
             * @description User's last name
             * @example Doe
             */
            lastname: string;
            /**
             * Format: email
             * @description User's email address (must be unique)
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description User's phone number (must be unique)
             * @example +1234567890
             */
            phone: string;
            /**
             * Format: password
             * @description User's password (minimum 8 characters)
             * @example password123
             */
            password: string;
            /**
             * Format: password
             * @description Password confirmation (must match password)
             * @example password123
             */
            password_confirmation: string;
            /**
             * @description ID of the role to assign to the user
             * @example 1
             */
            role_id: number;
            /**
             * @description Doctor ID (required only when role is 'doc')
             * @example 5
             */
            doctor_id?: number | null;
        };
        UpdateAuthResourceRequest: {
            /** @description Refresh token for authentication */
            refresh_token: string;
        };
        /**
         * Update Blog Request
         * @description Request body for updating a blog
         */
        UpdateBlogRequest: {
            /** @description Title of the blog */
            title: string;
            /** @description Subtitle of the blog */
            sub_title?: string | null;
            /** @description Description of the blog */
            description: string;
            /** @description Duration of the blog */
            duration?: number | null;
            /** @description publish status of the blog default is false */
            published?: boolean | null;
            /**
             * Format: binary
             * @description Main image of the blog
             */
            main_image?: string | null;
        };
        UpdateDoctorRequest: {
            /** @example John */
            first_name: string;
            /** @example Doe */
            last_name: string;
            /** @example DOC123 */
            code: string;
            /** @example MD */
            sub_title?: string;
            /** @example Experienced doctor */
            short_description?: string;
            /**
             * Format: url
             * @example http://example.com
             */
            redirect: string;
            /** @example Detailed description */
            description?: string;
            /**
             * @example male
             * @enum {string}
             */
            gender: "male" | "female";
            /** @example 1 */
            hospital_id?: number;
            /** Format: binary */
            main_image?: string;
            terms?: number[];
            portfolio?: string[];
        };
        UpdateHospitalResourceRequest: {
            /** @description The name of the hospital */
            name: string;
            /** @description phone number of hospital */
            fax: string;
            address?: string;
            /** Format: uri */
            address_link?: string;
            email?: string;
            /**
             * Format: binary
             * @description An image file for the hospital
             */
            image?: string;
            /**
             * Format: binary
             * @description thumbnail file for the hospital
             */
            thumbnail?: string;
            /**
             * Format: binary
             * @description main thumbnail file for the hospital
             */
            main_thumbnail?: string;
        };
        UpdateSlideResourceRequest: {
            /** @description The title of the slide */
            title?: string;
            /** @description A description of the slide */
            description?: string;
            /** @description The ordering number for the slide */
            ordering?: number;
            /**
             * Format: uri
             * @description The link related to the slide
             */
            link?: string;
            /**
             * Format: binary
             * @description An image file for the slide
             */
            image: string;
            /** @description An array of buttons for the slide */
            button?: {
                /** @description The title of the button */
                title?: string;
                /**
                 * Format: uri
                 * @description The link for the button
                 */
                link?: string;
            }[];
        };
        /** @description Update Slider request body data */
        UpdateSliderResourceRequest: Record<string, never>;
        UpdateTermResourceRequest: {
            /** @description title of category item */
            title?: string;
            /** @description parent of category item */
            taxonomy_id?: number;
            /** @description slug of category item */
            slug?: string;
            /** @description category item show on client main page */
            is_main?: boolean;
            /** @description category item show on client filter page */
            is_filter?: boolean;
            /** @description category item show on client footer */
            is_footer?: boolean;
        };
        /**
         * Update User Request
         * @description Request body for updating an existing user. Note: Role cannot be changed via update.
         */
        UpdateUserRequest: {
            /**
             * @description User's first name
             * @example John
             */
            firstname?: string | null;
            /**
             * @description User's last name
             * @example Doe
             */
            lastname?: string | null;
            /**
             * Format: email
             * @description User's email address (must be unique)
             * @example john.doe@example.com
             */
            email?: string | null;
            /**
             * @description User's phone number (must be unique)
             * @example +1234567890
             */
            phone?: string | null;
            /**
             * Format: password
             * @description User's new password (minimum 8 characters)
             * @example newpassword123
             */
            password?: string | null;
            /**
             * Format: password
             * @description Password confirmation (must match password if password is provided)
             * @example newpassword123
             */
            password_confirmation?: string | null;
        };
        /**
         * Blog Resource
         * @description Blog resource representation
         */
        BlogResource: {
            /** @description The title of the blog */
            title?: string;
            /** @description The id of the blog */
            id?: number;
            /** @description The subtitle of the blog */
            sub_title?: string;
            /** @description The slug of the blog */
            slug?: string;
            /** @description The duration of the blog */
            duration?: number;
            /**
             * Format: date-time
             * @description The creation date of the blog
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description The publish date of the blog
             */
            published_at?: string;
            /** @description The description of the blog */
            description?: string;
            /** @description The main image of the blog */
            main_image?: components["schemas"]["FileResource"][];
            user?: components["schemas"]["UserResource"];
        };
        /**
         * DoctorResource
         * @description Doctor resource
         */
        DoctorResource: {
            /** @description id of the doctor */
            id: number;
            /** @description first name of the doctor */
            first_name: string;
            /** @description code number of the doctor */
            code: string;
            /** @description last name of the doctor */
            last_name: string;
            /** @description full name of the doctor */
            full_name: string;
            /** @description sub title of the doctor */
            sub_title: string;
            /** @description short description url of the doctor */
            short_description: string;
            /** @description redirect link of the doctor */
            redirect: string;
            /** @description gender of doctor */
            gender: string;
            /** @description description of doctor */
            description?: string;
            image: components["schemas"]["FileResource"];
            /** @description portfolio of doctor */
            portfolio?: components["schemas"]["FileResource"][];
            /** @description categories item of doctor */
            terms: components["schemas"]["TermResource"][];
            /** @description hospital of doctor */
            hospital?: components["schemas"]["HospitalResource"][];
        };
        /**
         * FileResource
         * @description File resource
         */
        FileResource: {
            /** @description ID of the slider */
            id: number;
            /** @description name of the file */
            file_name?: string;
            /**
             * Format: uri
             * @description preview url of the File
             */
            preview_url?: string;
            /**
             * Format: uri
             * @description original url of the File
             */
            original_url?: string;
            /** @description extension of the File */
            extension?: string;
            /** @description size of extension */
            size?: number;
        };
        /**
         * HomeResource
         * @description HomeResource resource
         */
        HomeResource: {
            /** @description List of sliders of home page */
            sliders?: components["schemas"]["SliderResource"][];
            /** @description terms list of home page */
            main_terms?: components["schemas"]["TermResource"][];
            /** @description terms list of home page */
            footer_terms?: components["schemas"]["TermResource"][];
            news?: components["schemas"]["BlogResource"][];
            /** @description hospital list of home page */
            hospitals?: components["schemas"]["HospitalResource"][];
            /** @description Blog list of home page */
            blogs?: components["schemas"]["BlogResource"][];
        };
        HospitalResource: {
            id: number;
            /** @description The name of the hospital */
            name: string;
            /** @description The full name of the hospital */
            full_name?: string;
            fax: string;
            address?: string;
            address_link?: string;
            website_link?: string;
            /** Format: uri */
            email: string;
            image: components["schemas"]["FileResource"];
            thumbnail: components["schemas"]["FileResource"];
        };
        /**
         * RoleResource
         * @description Role resource
         */
        RoleResource: {
            /** @description ID of the role */
            id: number;
            /** @description Name of the role */
            name: string;
            /** @description Guard name of the role */
            guard_name?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at?: string;
        };
        SlideResource: {
            /** @description The title of the slide */
            id?: number;
            /** @description The title of the slide */
            title: string;
            /** @description A brief description of the slide */
            description: string;
            /**
             * Format: uri
             * @description The link associated with the slide
             */
            link: string;
            image: components["schemas"]["FileResource"];
            /** @description The button data for the slide, if available */
            button?: {
                /** @description The title of the button */
                title?: string;
                /**
                 * Format: uri
                 * @description The link of the button
                 */
                link?: string;
            };
        };
        /**
         * SliderResource
         * @description Slider resource
         */
        SliderResource: {
            /** @description ID of the slider */
            id: number;
            /** @description name of the slider */
            name?: string;
            /** @description description of the slider */
            description?: string;
            /** @description key of the slider */
            key?: string;
            /** @description URL of the slider image */
            thumbnails?: components["schemas"]["FileResource"][];
            /** @description List of slides of slider */
            slides?: components["schemas"]["SlideResource"][];
        };
        /**
         * TaxonomyResource
         * @description Taxonomy resource
         */
        TaxonomyResource: {
            /** @description id of Taxonomy */
            id: number;
            /** @description title of Taxonomy */
            title: string;
            /** @description key of Taxonomy */
            key: string;
            /** @description categories item of doctor */
            terms?: components["schemas"]["TermResource"][];
        };
        /**
         * TermResource
         * @description Term resource
         */
        TermResource: {
            /** @description ID of the category item */
            id: number;
            /** @description title of the category item */
            title?: string;
            /** @description slug of the category item */
            slug?: string;
            taxonomy?: components["schemas"]["TaxonomyResource"];
        };
        /**
         * UserResource
         * @description User resource
         */
        UserResource: {
            /** @description ID of the user */
            id: number;
            /** @description name of the user */
            first_name?: string;
            /** @description last name of the user */
            last_name?: string;
            /** @description full name of the user */
            full_name?: string;
            /** @description phone number of the user */
            phone?: string;
            /** @description email of the user */
            email?: string;
            /** @description list of role that associated with the user . list of role include : full_admin admin doc */
            role?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    a4bc642ec00185478bc9639b706aa226: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user logged in retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    eecd875305a510812e3cfb3b2ecf4597: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreAuthResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    df2eee26444444a49a587c8073a4bf74: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description user logout successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "5a58f12544175cff1995af27dfdb9469": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAuthResourceRequest"];
            };
        };
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    getBlogs: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
                /** @description Include slider blogs */
                with_slider?: boolean;
                /** @description Search term to filter blogs by title or sub_title */
                "filter[search]"?: string;
                "filter[user_id]"?: number;
                /** @description 'news', 'blog' , social_responsibility */
                "filter[type]"?: string;
                /** @description Sort blogs by title : 'title', 'duration', 'sub_title', 'created_at', 'published_at' */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["BlogResource"][];
                        links?: components["schemas"]["LinksPaginationResource"];
                        meta?: components["schemas"]["MetaPaginationResource"];
                        slider?: components["schemas"]["BlogResource"][];
                    };
                };
            };
        };
    };
    "510eea3a968d4abf17a79e7f7003adf7": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreBlogRequest"];
            };
        };
        responses: {
            /** @description Blog created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    getBlogById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the blog to retrieve */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogResource"];
                };
            };
            /** @description Blog not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateBlog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the blog to update */
                slug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBlogRequest"];
            };
        };
        responses: {
            /** @description Blog updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogResource"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Blog not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    deleteBlog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the blog to delete */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Blog deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                    };
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Blog not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cd066ac893c261ef13773c81ebc8c53e: {
        parameters: {
            query?: {
                /** @description search in data of doctors */
                "filter[search]"?: string;
                /** @description filter doctrs by gender (male or female) example:male */
                "filter[gender]"?: string;
                /** @description filter doctrs by terms and explode by , example:26,25 */
                "filter[terms]"?: string;
                /** @description filter doctrs by terms slug */
                "filter[slug]"?: string;
                /** @description filter doctrs by hospital_id */
                "filter[hospital]"?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "08504526ddafe7c7f25782a3b582fb29": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreDoctorRequest"];
            };
        };
        responses: {
            /** @description Doctor created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResource"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDoctor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the doctor to be retrieved */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Doctor retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResource"];
                };
            };
            /** @description Doctor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateDoctor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the doctor to be updated */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDoctorRequest"];
            };
        };
        responses: {
            /** @description Doctor updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResource"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Doctor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteDoctor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the doctor to be deleted */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Doctor deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResource"];
                };
            };
            /** @description Doctor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "96ccc37cd35051ad90e041d369802410": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "04133cbf993f335bdb1e35a58c500c1b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of hospitals retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "0ab3300ee914a752b8b453ef4ea7f0c3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreHospitalResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    b45a9fedc9ccff7d6e29c17b60ec200f: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description hospital id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "8e649c100ec0bb790b3c8c897903a610": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description hospital id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateHospitalResourceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UpdateHospitalResourceRequest"];
                "application/json": components["schemas"]["UpdateHospitalResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateHospitalResourceRequest"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "61bde55e77855d5fd5394f8c990640a7": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description hospital id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "6e28bdec08d7292bde33180ca5928718": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["RoleResource"][];
                    };
                };
            };
        };
    };
    searchIndex: {
        parameters: {
            query?: {
                /** @description کلمه مورد نظر برای جستجو */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description نتایج جستجو */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        results?: {
                            /** @example 1 */
                            id?: number;
                            /** @example دکتر علی رضایی */
                            name?: string;
                            /** @example doctor */
                            type?: string;
                            /** @example /doctors/1 */
                            url?: string;
                        }[];
                    };
                };
            };
            /** @description کلمه‌ای برای جستجو وارد نشده است. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    d68f02bbffdeef5996d8e7286b362f9f: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreSlideResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlideResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "7ccba6856ecb8384de5ba5859f54a978": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slide id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlideResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    f3070ad18858c5f1a7514e35967c7d7b: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slide id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateSlideResourceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UpdateSlideResourceRequest"];
                "application/json": components["schemas"]["UpdateSlideResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlideResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "955b350565c5e98b5f0228aaca70b32c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slide id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cc61defe0228a78cfd161ef9bc03f937: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of sliders retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SliderResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    d7c869cdc8d198956063e40717607260: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Slider id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SliderResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "99445685e00f51b9a39e7af94ccb4d57": {
        parameters: {
            query?: {
                /** @description slider name */
                name?: string;
                /** @description slider description */
                description?: string;
                /** @description slider thumbnails */
                thumbnails?: Record<string, never>[];
            };
            header?: never;
            path: {
                /** @description Slider id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSliderResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SliderResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "056dd01386c7c072d4c885b73ca293d6": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxonomyResource"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    d5667ffe66f0c410e63b85f00fa2ecd6: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
                /** @description search in data of terms */
                "filter[search]"?: string;
                /** @description Sort blogs by title : 'title', 'duration', 'sub_title', 'created_at', 'published_at' */
                sort?: string;
                "filter[taxonomy_id]"?: number;
                /** @description default 15 */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Categories items retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TermResource"][];
                        links?: components["schemas"]["LinksPaginationResource"];
                        meta?: components["schemas"]["MetaPaginationResource"];
                    };
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "1a6f4d61185ab52b011b89d4c16cde38": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreTermResourceRequest"];
            };
        };
        responses: {
            /** @description categories item in store successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "34f9180e8b773588bddbbdc1e7241f0d": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description categories item in store successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    fc726b27a16f5e8efc2177ac826fdf7a: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the term to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTermResourceRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermResource"];
                };
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "6c8c3bf110028e26cde48c141334eef2": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the term to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description category item destroy successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "7e2f5799553ec93c9c43e2a58490d447": {
        parameters: {
            query?: {
                /** @description Search in first name, last name, email, or phone */
                "filter[search]"?: string;
                /** @description Number of users per page */
                per_page?: number;
                /** @description Page number */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserResource"][];
                        links?: Record<string, never>;
                        meta?: Record<string, never>;
                    };
                };
            };
        };
    };
    a1fce870c566eb5fc0cf3178ec5d2fed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["StoreUserRequest"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserResource"];
                    };
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "910a0c7cf580e1c605648d82a4e57f46": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserResource"];
                    };
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ddfe232db1870b82493bf8bd25596d37: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserResource"];
                    };
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
        };
    };
    "43dd20becb1f47444e484cbb18ce345c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
